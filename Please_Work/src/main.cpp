/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       main.cpp                                                  */
/*    Author:       Pedro 18031A                                              */
/*    Created:      Mon Jun 10 2024                                           */
/*    Description:  V5 project                                                */
/*                                                                            */
/*----------------------------------------------------------------------------*/
//Made by Pedro from 18031A
// ---- START VEXCODE CONFIGURED DEVICES ----
// ---- END VEXCODE CONFIGURED DEVICES ----
// What are comments anyways? (seriously sorry for the hell your about to go through by looking at this)
#include "vex.h"

using namespace vex;
#include "robot-config.h"
#include <iostream> // std::cout, std::fixed
#include <iomanip>  // std::setprecision
#define _USE_MATH_DEFINES
#include <math.h>
vex::motor motor2 = vex::motor(vex::PORT18);

#include "vex.h"

using namespace vex;

#include "vex.h"

using namespace vex;






#include "vex.h"

using namespace vex;

#include "vex.h"

using namespace vex;

void drawLogo() {
    static const char* imageColors[] = {
        "#000000", "#030303", "#050505", "#040404", "#333333", "#707070", "#727272", "#6f6f6f", "#606060", "#121212", "#010101", "#0d0d0d", "#6b6b6b", "#6e6e6e", "#717171", "#737373", "#393939", "#080808", "#1d1d1d", "#191919", "#020202", "#060606", "#0c0c0c", "#565656", "#434343", "#292929", "#6c6c6c", "#6a6a6a", "#161616", "#494949", "#767676", "#5c5c5c", "#070707", "#0e0e0e", "#7b7b7b", "#fefefe", "#fcfcfc", "#d9d9d9", "#1e1e1e", "#1b1b1b", "#d4d4d4", "#fdfdfd", "#fafafa", "#7c7c7c", "#f8f8f8", "#313131", "#cbcbcb", "#949494", "#525252", "#efefef", "#2a2a2a", "#a1a1a1", "#232323", "#f7f7f7", "#d8d8d8", "#181818", "#797979", "#444444", "#fbfbfb", "#f9f9f9", "#0a0a0a", "#989898", "#f4f4f4", "#cfcfcf", "#202020", "#ffffff", "#555555", "#d7d7d7", "#1a1a1a", "#484848", "#2f2f2f", "#c9c9c9", "#969696", "#535353", "#f2f2f2", "#a0a0a0", "#cecece", "#1f1f1f", "#747474", "#dbdbdb", "#454545", "#2e2e2e", "#101010", "#545454", "#f6f6f6", "#262626", "#757575", "#111111", "#c8c8c8", "#dadada", "#7a7a7a", "#cdcdcd", "#a2a2a2", "#696969", "#e5e5e5", "#e4e4e4", "#e2e2e2", "#c4c4c4", "#171717", "#c1c1c1", "#e3e3e3", "#e1e1e1", "#b4b4b4", "#838383", "#8c8c8c", "#e6e6e6", "#bbbbbb", "#dedede", "#4e4e4e", "#2d2d2d", "#2b2b2b", "#272727", "#242424", "#303030", "#151515", "#212121", "#2c2c2c", "#1c1c1c", "#222222", "#aaaaaa", "#c3c3c3", "#505050", "#676767", "#dfdfdf", "#656565", "#e0e0e0", "#464646", "#646464", "#0f0f0f", "#131313", "#141414", "#424242", "#0b0b0b", "#090909", "#e7e7e7", "#c5c5c5", "#a9a9a9", "#c6c6c6", "#e8e8e8", "#e9e9e9", "#d6d6d6", "#ececec", "#b3b3b3", "#888888", "#dcdcdc", "#5e5e5e", "#909090", "#b7b7b7", "#282828", "#b6b6b6", "#7d7d7d", "#c0c0c0", "#eaeaea", "#939393", "#373737", "#6d6d6d", "#9c9c9c", "#cacaca", "#5a5a5a", "#595959", "#686868", "#7f7f7f", "#bcbcbc", "#ededed", "#9a9a9a", "#383838", "#f3f3f3", "#a4a4a4", "#585858", "#eeeeee", "#666666", "#ebebeb", "#9e9e9e", "#363636", "#f1f1f1", "#a3a3a3", "#c7c7c7", "#252525", "#b8b8b8", "#474747", "#4b4b4b", "#acacac", "#b9b9b9", "#b5b5b5", "#b1b1b1", "#636363", "#4c4c4c", "#3a3a3a", "#d2d2d2", "#a6a6a6", "#a8a8a8", "#777777", "#4a4a4a", "#353535", "#858585", "#a5a5a5", "#8e8e8e", "#f5f5f5", "#f0f0f0", "#8d8d8d", "#828282", "#8f8f8f", "#8b8b8b", "#808080", "#9d9d9d", "#575757", "#8a8a8a", "#a7a7a7", "#adadad", "#aeaeae", "#bfbfbf", "#868686", "#7e7e7e", "#323232", "#404040", "#dddddd", "#343434", "#3f3f3f", "#b2b2b2", "#afafaf", "#4d4d4d", "#979797", "#b0b0b0", "#919191", "#3c3c3c", "#c2c2c2", "#999999", "#3e3e3e", "#848484", "#515151", "#9b9b9b", "#898989", "#959595", "#d0d0d0", "#787878", "#818181", "#d5d5d5", "#d1d1d1", "#bababa", "#5b5b5b", "#bdbdbd", "#ababab", "#3b3b3b", "#878787", "#3d3d3d", "#626262", "#929292", "#bebebe", 
    };

    static const int imageIndices[] = {
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 1, 11, 12, 13, 6, 14, 5, 15, 13, 5, 16, 0, 17, 18, 5, 7, 19, 20, 21, 0, 22, 23, 14, 15, 5, 24, 17, 1, 20, 0, 2, 25, 26, 14, 5, 27, 28, 20, 2, 0, 20, 3, 20, 29, 5, 13, 30, 31, 32, 0, 3, 20, 33, 5, 14, 7, 5, 15, 5, 25, 0, 3, 10, 21, 34, 35, 36, 35, 37, 38, 0, 10, 1, 0, 39, 40, 35, 41, 35, 36, 41, 42, 43, 0, 3, 29, 42, 41, 35, 44, 45, 1, 10, 0, 9, 46, 36, 41, 35, 47, 3, 20, 0, 3, 48, 36, 35, 49, 50, 3, 10, 0, 21, 20, 1, 51, 35, 41, 46, 21, 0, 10, 1, 10, 52, 53, 36, 35, 36, 35, 36, 23, 0, 1, 3, 20, 30, 41, 36, 54, 19, 0, 10, 1, 55, 37, 35, 36, 41, 42, 35, 41, 56, 0, 1, 57, 58, 36, 41, 59, 45, 3, 10, 0, 60, 46, 35, 36, 41, 61, 20, 0, 1, 23, 35, 41, 62, 25, 3, 20, 0, 3, 1, 20, 51, 41, 36, 42, 63, 21, 0, 1, 0, 3, 64, 53, 35, 65, 35, 41, 36, 35, 66, 0, 32, 1, 3, 6, 35, 41, 58, 67, 39, 0, 20, 0, 1, 68, 37, 35, 36, 35, 58, 36, 43, 0, 1, 69, 36, 41, 35, 42, 70, 10, 3, 0, 33, 71, 41, 35, 72, 21, 3, 1, 0, 2, 73, 59, 41, 35, 74, 50, 10, 1, 0, 10, 20, 21, 75, 35, 36, 35, 76, 20, 0, 10, 1, 20, 77, 53, 41, 35, 65, 41, 36, 66, 0, 10, 78, 65, 36, 41, 79, 19, 0, 10, 68, 37, 36, 35, 65, 35, 41, 35, 34, 0, 80, 36, 35, 65, 35, 81, 10, 0, 82, 71, 35, 65, 47, 10, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 20, 0, 75, 65, 35, 65, 76, 0, 10, 20, 10, 64, 44, 35, 65, 35, 65, 35, 65, 35, 23, 0, 10, 78, 65, 36, 41, 79, 19, 0, 10, 68, 37, 36, 35, 65, 35, 41, 35, 34, 0, 80, 36, 35, 65, 35, 81, 10, 0, 82, 71, 35, 65, 47, 10, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 20, 0, 75, 65, 35, 65, 76, 0, 10, 20, 10, 64, 44, 35, 65, 35, 65, 35, 65, 35, 23, 0, 10, 78, 65, 36, 41, 79, 19, 0, 10, 68, 37, 36, 35, 65, 35, 41, 35, 34, 0, 80, 36, 35, 65, 35, 81, 10, 0, 82, 71, 35, 65, 47, 10, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 20, 0, 75, 65, 35, 65, 76, 0, 10, 20, 10, 64, 44, 35, 65, 35, 65, 35, 65, 35, 23, 0, 10, 78, 65, 36, 41, 79, 19, 0, 10, 68, 37, 36, 35, 65, 35, 41, 35, 34, 0, 80, 36, 35, 65, 35, 81, 10, 0, 82, 71, 35, 65, 47, 10, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 20, 0, 75, 65, 35, 65, 76, 0, 10, 20, 10, 64, 44, 35, 65, 35, 65, 35, 65, 35, 23, 0, 20, 0, 20, 86, 35, 36, 41, 79, 19, 0, 20, 19, 37, 41, 35, 65, 35, 41, 65, 35, 43, 0, 80, 36, 35, 65, 35, 81, 10, 0, 87, 88, 35, 72, 20, 0, 1, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 10, 20, 75, 35, 36, 41, 76, 1, 0, 10, 20, 10, 64, 44, 35, 65, 41, 35, 36, 65, 35, 83, 0, 20, 0, 10, 0, 10, 0, 10, 0, 20, 6, 35, 41, 79, 68, 0, 20, 19, 89, 35, 65, 35, 41, 36, 90, 0, 80, 36, 35, 65, 35, 81, 10, 0, 82, 88, 35, 41, 35, 47, 20, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 20, 10, 1, 75, 35, 91, 20, 0, 10, 20, 10, 64, 53, 35, 36, 35, 65, 41, 35, 23, 0, 20, 0, 10, 0, 10, 0, 1, 10, 30, 35, 59, 36, 37, 55, 0, 20, 19, 54, 36, 35, 41, 35, 36, 56, 0, 80, 36, 35, 65, 35, 81, 10, 0, 82, 71, 41, 36, 35, 72, 10, 20, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 10, 1, 10, 92, 35, 36, 41, 63, 20, 0, 10, 20, 10, 64, 44, 35, 65, 41, 35, 41, 36, 41, 66, 0, 1, 10, 0, 20, 0, 10, 0, 10, 0, 20, 10, 1, 93, 94, 95, 96, 97, 98, 0, 20, 19, 99, 94, 100, 95, 94, 100, 95, 101, 5, 0, 80, 36, 35, 65, 35, 81, 10, 0, 33, 102, 101, 94, 103, 1, 10, 20, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 20, 3, 104, 94, 105, 101, 106, 1, 0, 10, 20, 10, 64, 107, 94, 105, 95, 94, 95, 94, 108, 0, 21, 33, 9, 87, 60, 10, 20, 0, 20, 1, 0, 68, 109, 110, 81, 111, 21, 0, 20, 2, 112, 81, 70, 109, 113, 114, 0, 80, 36, 35, 65, 35, 81, 10, 0, 21, 115, 70, 116, 109, 117, 0, 20, 1, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 20, 10, 18, 109, 113, 118, 2, 0, 10, 0, 10, 21, 116, 109, 81, 109, 9, 0, 38, 119, 99, 97, 120, 121, 3, 20, 0, 20, 10, 0, 3, 1, 0, 1, 0, 10, 0, 20, 3, 10, 0, 1, 3, 10, 20, 0, 80, 36, 35, 65, 35, 81, 10, 0, 1, 10, 20, 1, 0, 1, 10, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 20, 10, 1, 20, 0, 20, 1, 3, 0, 10, 0, 20, 0, 20, 1, 0, 10, 0, 52, 101, 41, 36, 35, 122, 10, 1, 10, 0, 10, 20, 10, 20, 0, 10, 20, 0, 10, 0, 10, 20, 0, 10, 0, 10, 0, 80, 36, 35, 65, 35, 81, 10, 0, 1, 20, 10, 0, 10, 1, 20, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 20, 0, 10, 0, 20, 10, 1, 0, 10, 0, 10, 0, 20, 0, 20, 0, 112, 123, 35, 36, 35, 124, 20, 1, 0, 1, 10, 20, 10, 0, 10, 0, 10, 0, 10, 20, 0, 10, 1, 10, 0, 80, 36, 35, 65, 35, 81, 10, 0, 10, 20, 0, 20, 1, 20, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 20, 3, 20, 0, 10, 20, 10, 0, 10, 0, 20, 10, 0, 112, 125, 35, 41, 35, 122, 10, 3, 10, 0, 1, 10, 3, 0, 20, 3, 0, 10, 0, 20, 2, 20, 3, 0, 1, 10, 20, 10, 0, 10, 0, 10, 20, 1, 0, 10, 0, 20, 1, 20, 10, 0, 1, 10, 1, 10, 20, 126, 36, 65, 58, 70, 2, 10, 0, 1, 20, 1, 10, 0, 1, 20, 1, 0, 20, 10, 1, 10, 0, 3, 10, 20, 1, 0, 20, 3, 20, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 3, 10, 1, 0, 20, 3, 1, 21, 0, 1, 20, 1, 0, 10, 3, 20, 0, 20, 3, 10, 20, 10, 0, 20, 1, 20, 1, 0, 10, 20, 0, 20, 10, 0, 20, 1, 20, 10, 0, 20, 1, 20, 10, 0, 20, 10, 1, 10, 0, 118, 101, 35, 65, 127, 0, 20, 3, 20, 128, 9, 98, 28, 114, 1, 0, 1, 20, 33, 9, 129, 82, 20, 1, 0, 10, 2, 33, 130, 9, 130, 87, 33, 0, 1, 9, 130, 129, 66, 59, 35, 65, 84, 131, 130, 9, 87, 10, 20, 10, 0, 2, 130, 129, 9, 82, 1, 20, 0, 1, 3, 2, 130, 9, 28, 9, 87, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 10, 20, 9, 129, 114, 3, 0, 10, 20, 9, 98, 28, 130, 11, 0, 1, 10, 20, 21, 9, 130, 9, 28, 129, 130, 132, 0, 10, 0, 20, 133, 9, 130, 129, 9, 128, 19, 20, 2, 0, 1, 20, 9, 22, 0, 20, 0, 118, 101, 35, 65, 127, 0, 1, 0, 3, 27, 134, 100, 94, 135, 55, 0, 20, 10, 86, 134, 136, 17, 20, 0, 20, 0, 1, 98, 137, 138, 94, 139, 134, 138, 139, 13, 0, 10, 0, 17, 140, 138, 139, 134, 141, 36, 65, 36, 134, 138, 105, 134, 104, 20, 0, 82, 142, 105, 134, 143, 10, 20, 0, 3, 0, 4, 144, 134, 94, 105, 141, 145, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 1, 10, 20, 146, 134, 94, 138, 147, 17, 0, 1, 10, 47, 134, 94, 138, 95, 66, 0, 10, 20, 10, 117, 96, 138, 134, 105, 48, 0, 10, 3, 10, 50, 67, 138, 139, 138, 134, 139, 125, 148, 20, 0, 10, 130, 149, 138, 134, 8, 20, 10, 0, 118, 101, 35, 65, 127, 0, 10, 20, 2, 86, 35, 41, 42, 144, 19, 0, 20, 2, 150, 35, 151, 60, 10, 0, 1, 10, 3, 39, 67, 36, 58, 41, 35, 36, 59, 150, 0, 20, 10, 0, 22, 152, 35, 41, 35, 41, 65, 59, 35, 36, 35, 61, 1, 20, 0, 87, 137, 58, 35, 153, 3, 1, 20, 0, 10, 20, 154, 74, 35, 36, 58, 41, 155, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 10, 1, 20, 156, 35, 36, 157, 20, 0, 20, 51, 35, 41, 58, 36, 158, 0, 10, 3, 64, 62, 35, 36, 58, 159, 0, 1, 3, 1, 113, 152, 65, 35, 41, 50, 3, 0, 20, 129, 157, 35, 160, 3, 1, 0, 118, 101, 35, 65, 127, 0, 10, 78, 65, 36, 41, 79, 19, 0, 20, 10, 161, 65, 41, 35, 65, 35, 162, 132, 20, 1, 20, 0, 10, 68, 37, 36, 35, 65, 35, 41, 35, 34, 0, 10, 60, 163, 35, 41, 36, 58, 65, 36, 58, 35, 164, 1, 0, 82, 71, 35, 65, 47, 10, 0, 20, 3, 165, 166, 35, 41, 35, 36, 35, 36, 58, 65, 27, 0, 10, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 20, 0, 75, 65, 35, 65, 76, 0, 3, 20, 167, 35, 36, 41, 58, 36, 65, 41, 36, 35, 58, 36, 168, 0, 10, 20, 10, 64, 44, 35, 65, 35, 65, 35, 65, 35, 23, 0, 81, 169, 35, 65, 36, 41, 36, 35, 36, 35, 42, 36, 41, 58, 116, 20, 10, 20, 10, 0, 10, 1, 20, 82, 71, 35, 41, 36, 35, 41, 35, 41, 65, 27, 20, 0, 112, 123, 35, 36, 65, 170, 3, 10, 0, 10, 78, 65, 36, 41, 79, 19, 0, 20, 10, 161, 65, 35, 36, 58, 41, 35, 65, 36, 162, 132, 3, 10, 21, 0, 10, 68, 37, 36, 35, 65, 35, 41, 35, 34, 0, 10, 60, 171, 35, 41, 36, 65, 41, 35, 65, 36, 35, 172, 0, 20, 1, 0, 82, 71, 35, 65, 47, 10, 0, 3, 10, 173, 174, 35, 58, 35, 36, 35, 36, 122, 0, 1, 3, 10, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 20, 0, 75, 65, 35, 65, 76, 0, 1, 3, 10, 175, 35, 41, 36, 35, 65, 41, 36, 41, 36, 41, 159, 0, 10, 20, 10, 64, 44, 35, 65, 35, 65, 35, 65, 35, 23, 0, 81, 169, 35, 65, 35, 58, 35, 65, 41, 58, 36, 116, 10, 1, 20, 0, 10, 1, 20, 10, 20, 9, 88, 36, 35, 65, 36, 41, 35, 36, 35, 65, 27, 20, 0, 112, 125, 36, 41, 36, 170, 3, 0, 2, 0, 10, 78, 65, 36, 41, 79, 19, 0, 20, 10, 161, 65, 41, 35, 58, 42, 35, 65, 42, 162, 60, 2, 10, 20, 10, 21, 0, 10, 68, 37, 36, 35, 65, 35, 41, 35, 34, 0, 10, 60, 163, 35, 42, 36, 58, 41, 65, 42, 35, 58, 35, 156, 20, 3, 20, 0, 82, 71, 35, 65, 47, 10, 0, 20, 10, 4, 169, 35, 53, 36, 41, 42, 35, 27, 0, 3, 21, 20, 1, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 20, 0, 75, 65, 35, 65, 76, 0, 3, 20, 167, 35, 58, 41, 35, 65, 59, 35, 65, 42, 36, 58, 41, 158, 0, 10, 20, 10, 64, 44, 35, 65, 35, 65, 35, 65, 35, 23, 0, 81, 169, 35, 65, 36, 58, 36, 35, 42, 58, 35, 36, 44, 58, 110, 10, 20, 10, 1, 20, 0, 3, 10, 1, 3, 82, 176, 35, 65, 41, 65, 35, 58, 35, 65, 27, 20, 0, 177, 101, 35, 160, 20, 21, 3, 0, 10, 78, 65, 36, 41, 79, 19, 0, 20, 10, 161, 65, 41, 174, 106, 147, 178, 53, 41, 65, 35, 36, 91, 48, 179, 29, 126, 180, 112, 0, 10, 68, 37, 36, 35, 65, 35, 41, 35, 34, 0, 10, 60, 181, 182, 149, 182, 183, 157, 42, 36, 65, 44, 176, 102, 147, 178, 12, 3, 20, 0, 82, 71, 35, 65, 47, 10, 0, 20, 3, 50, 181, 147, 142, 76, 36, 58, 41, 35, 44, 156, 69, 57, 128, 10, 20, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 20, 0, 75, 65, 35, 65, 76, 0, 20, 21, 6, 147, 37, 35, 59, 36, 65, 35, 123, 149, 147, 182, 184, 179, 0, 10, 20, 10, 64, 44, 35, 65, 35, 65, 35, 65, 35, 23, 0, 81, 169, 35, 65, 35, 36, 91, 147, 54, 35, 41, 35, 42, 44, 185, 186, 69, 179, 180, 187, 2, 20, 0, 115, 165, 16, 80, 188, 36, 35, 41, 65, 174, 178, 147, 151, 62, 36, 41, 65, 27, 20, 0, 68, 47, 189, 190, 136, 131, 32, 1, 3, 0, 10, 78, 65, 36, 41, 79, 19, 0, 20, 10, 161, 65, 35, 41, 101, 28, 17, 60, 133, 87, 152, 41, 35, 36, 53, 62, 191, 0, 10, 68, 37, 36, 35, 65, 35, 41, 35, 34, 0, 17, 133, 192, 41, 36, 65, 35, 193, 60, 17, 20, 0, 10, 0, 82, 71, 35, 65, 47, 10, 0, 20, 0, 3, 60, 17, 60, 48, 35, 65, 35, 59, 53, 49, 52, 20, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 20, 0, 75, 65, 35, 65, 76, 0, 10, 0, 1, 17, 194, 35, 65, 35, 195, 17, 132, 60, 22, 60, 3, 0, 10, 20, 10, 64, 44, 35, 65, 35, 65, 35, 65, 35, 23, 0, 81, 169, 35, 65, 35, 41, 145, 17, 196, 35, 36, 44, 62, 197, 84, 97, 82, 0, 20, 0, 143, 49, 141, 74, 59, 35, 41, 37, 33, 133, 60, 17, 68, 198, 35, 65, 27, 20, 0, 1, 0, 10, 78, 65, 36, 41, 79, 19, 0, 20, 10, 161, 65, 35, 107, 11, 0, 10, 17, 152, 41, 35, 36, 150, 0, 10, 68, 37, 36, 35, 65, 35, 41, 35, 34, 0, 20, 126, 36, 65, 35, 70, 10, 0, 10, 0, 82, 71, 35, 65, 47, 10, 0, 10, 0, 20, 186, 35, 65, 41, 35, 44, 85, 10, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 20, 0, 75, 65, 35, 65, 76, 0, 10, 0, 103, 41, 35, 65, 35, 92, 10, 0, 10, 20, 0, 10, 20, 10, 64, 44, 35, 65, 35, 65, 35, 65, 35, 23, 0, 81, 169, 35, 65, 35, 59, 83, 0, 199, 35, 91, 82, 0, 20, 0, 199, 58, 35, 41, 35, 65, 35, 41, 37, 2, 0, 10, 0, 82, 163, 35, 41, 65, 27, 20, 0, 10, 78, 65, 36, 41, 79, 19, 0, 20, 10, 161, 65, 36, 65, 101, 128, 0, 10, 0, 17, 152, 41, 35, 65, 35, 65, 41, 43, 0, 10, 68, 37, 36, 35, 65, 35, 41, 35, 34, 0, 10, 80, 58, 36, 65, 41, 109, 0, 10, 0, 82, 71, 35, 65, 47, 10, 0, 10, 20, 0, 20, 186, 35, 65, 35, 65, 35, 53, 112, 0, 10, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 20, 0, 75, 65, 35, 65, 76, 0, 200, 36, 35, 65, 41, 51, 0, 20, 0, 10, 0, 10, 20, 10, 64, 44, 35, 65, 35, 65, 35, 65, 35, 23, 0, 81, 169, 35, 65, 36, 35, 58, 23, 0, 104, 35, 65, 35, 91, 82, 0, 20, 0, 201, 41, 35, 36, 35, 65, 35, 41, 37, 2, 0, 9, 169, 65, 41, 65, 27, 20, 0, 10, 78, 65, 36, 41, 79, 19, 0, 20, 10, 161, 65, 35, 123, 128, 0, 10, 20, 0, 17, 152, 41, 35, 41, 35, 41, 43, 0, 10, 68, 37, 36, 35, 65, 35, 41, 35, 34, 0, 80, 36, 35, 65, 36, 81, 10, 0, 10, 0, 82, 71, 35, 65, 47, 10, 0, 10, 20, 0, 192, 35, 65, 35, 65, 35, 53, 177, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 20, 0, 75, 65, 35, 65, 76, 0, 10, 0, 200, 36, 35, 65, 35, 92, 0, 10, 0, 10, 20, 10, 64, 44, 35, 65, 35, 65, 35, 65, 35, 23, 0, 81, 169, 35, 65, 35, 65, 42, 23, 0, 202, 35, 41, 35, 91, 82, 0, 20, 0, 201, 36, 35, 41, 35, 65, 35, 41, 37, 2, 0, 10, 0, 87, 169, 65, 35, 65, 27, 20, 0, 10, 78, 65, 36, 41, 79, 19, 0, 20, 10, 161, 65, 35, 65, 123, 33, 0, 10, 0, 21, 152, 41, 35, 65, 35, 41, 43, 0, 10, 68, 37, 36, 35, 65, 35, 41, 35, 34, 0, 80, 36, 35, 65, 35, 81, 10, 0, 82, 71, 35, 65, 47, 10, 0, 20, 1, 20, 1, 108, 36, 35, 65, 44, 177, 10, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 20, 0, 75, 65, 35, 65, 76, 0, 20, 2, 1, 0, 203, 41, 65, 36, 41, 35, 41, 58, 41, 35, 36, 204, 1, 20, 0, 10, 20, 10, 64, 44, 35, 65, 35, 65, 35, 65, 35, 23, 0, 81, 169, 35, 65, 35, 36, 205, 0, 206, 35, 65, 35, 65, 35, 76, 82, 0, 20, 0, 201, 41, 35, 65, 35, 41, 37, 21, 0, 10, 0, 33, 198, 35, 41, 65, 27, 20, 0, 10, 78, 65, 36, 41, 79, 19, 0, 20, 10, 161, 65, 35, 65, 123, 33, 0, 10, 0, 21, 152, 41, 35, 65, 35, 41, 43, 0, 10, 68, 37, 36, 35, 65, 35, 41, 35, 34, 0, 80, 36, 35, 65, 35, 81, 10, 0, 82, 71, 35, 65, 47, 10, 0, 10, 0, 112, 207, 208, 209, 151, 36, 35, 65, 44, 177, 10, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 20, 0, 75, 65, 35, 65, 76, 0, 20, 118, 150, 200, 210, 35, 36, 65, 35, 41, 35, 141, 211, 150, 43, 161, 212, 186, 3, 20, 0, 10, 20, 10, 64, 44, 35, 65, 35, 65, 35, 65, 35, 23, 0, 81, 169, 35, 65, 35, 36, 205, 0, 206, 35, 65, 35, 65, 35, 76, 82, 0, 20, 0, 201, 41, 35, 65, 35, 41, 37, 21, 0, 10, 0, 33, 198, 35, 41, 65, 27, 20, 0, 10, 78, 65, 36, 41, 79, 19, 0, 20, 10, 161, 65, 35, 65, 123, 33, 0, 10, 0, 21, 152, 41, 35, 65, 35, 41, 43, 0, 10, 68, 37, 36, 35, 65, 35, 41, 35, 34, 0, 80, 36, 35, 65, 35, 81, 10, 0, 82, 71, 35, 65, 47, 10, 0, 10, 1, 213, 198, 35, 58, 36, 35, 65, 44, 177, 10, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 20, 0, 75, 65, 35, 65, 76, 0, 20, 0, 214, 74, 58, 41, 36, 35, 41, 65, 35, 123, 114, 2, 3, 21, 3, 1, 10, 0, 10, 20, 10, 64, 44, 35, 65, 35, 65, 35, 65, 35, 23, 0, 81, 169, 35, 65, 35, 36, 205, 0, 206, 35, 65, 35, 65, 35, 76, 82, 0, 20, 0, 201, 41, 35, 65, 35, 41, 37, 21, 0, 10, 0, 33, 198, 35, 41, 65, 27, 20, 0, 10, 78, 65, 36, 41, 79, 19, 0, 20, 10, 161, 65, 35, 65, 123, 33, 0, 10, 0, 21, 152, 41, 35, 65, 35, 41, 43, 0, 10, 68, 37, 36, 35, 65, 35, 41, 35, 34, 0, 80, 36, 35, 65, 35, 81, 10, 0, 82, 71, 35, 65, 47, 10, 0, 10, 4, 74, 65, 36, 41, 35, 65, 44, 177, 10, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 20, 0, 75, 65, 35, 65, 76, 0, 10, 1, 214, 197, 65, 36, 35, 36, 35, 65, 35, 65, 36, 215, 82, 20, 10, 0, 20, 10, 0, 20, 0, 10, 20, 10, 64, 44, 35, 65, 35, 65, 35, 65, 35, 23, 0, 81, 169, 35, 65, 35, 36, 205, 0, 206, 35, 65, 35, 65, 35, 76, 82, 0, 20, 0, 201, 41, 35, 65, 35, 41, 37, 21, 0, 10, 0, 33, 198, 35, 41, 65, 27, 20, 0, 10, 78, 65, 36, 41, 79, 19, 0, 20, 10, 161, 65, 35, 65, 123, 33, 0, 10, 0, 21, 152, 41, 35, 65, 35, 41, 43, 0, 10, 68, 37, 36, 35, 65, 35, 41, 35, 34, 0, 80, 36, 35, 65, 35, 81, 10, 0, 82, 71, 35, 65, 47, 10, 0, 20, 0, 10, 20, 4, 74, 65, 35, 41, 42, 36, 35, 65, 44, 177, 10, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 20, 0, 75, 65, 35, 65, 76, 0, 10, 3, 1, 20, 10, 214, 197, 65, 41, 35, 65, 41, 35, 41, 35, 144, 128, 20, 0, 10, 20, 10, 64, 44, 35, 65, 35, 65, 35, 65, 35, 23, 0, 81, 169, 35, 65, 35, 36, 205, 0, 206, 35, 65, 35, 65, 35, 76, 82, 0, 20, 0, 201, 41, 35, 65, 35, 41, 37, 21, 0, 10, 0, 33, 198, 35, 41, 65, 27, 20, 0, 20, 0, 2, 20, 1, 0, 10, 78, 65, 36, 41, 79, 19, 0, 20, 10, 161, 65, 35, 65, 123, 33, 0, 10, 0, 21, 152, 41, 35, 65, 35, 41, 43, 0, 10, 68, 37, 36, 35, 65, 35, 41, 35, 34, 0, 80, 36, 35, 65, 35, 81, 10, 0, 82, 71, 35, 65, 47, 10, 0, 1, 0, 3, 10, 20, 3, 216, 62, 65, 36, 58, 35, 41, 36, 35, 36, 65, 44, 177, 10, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 20, 0, 75, 65, 35, 65, 76, 0, 2, 0, 20, 0, 21, 217, 62, 65, 35, 65, 35, 36, 41, 36, 144, 9, 0, 20, 0, 10, 20, 10, 64, 44, 35, 65, 35, 65, 35, 65, 35, 23, 0, 81, 169, 35, 65, 35, 36, 205, 0, 206, 35, 65, 35, 65, 35, 76, 82, 0, 20, 0, 201, 41, 35, 65, 35, 41, 37, 21, 0, 10, 0, 33, 198, 35, 41, 65, 27, 20, 0, 20, 1, 10, 20, 3, 0, 1, 10, 0, 10, 78, 65, 36, 41, 79, 19, 0, 20, 10, 161, 65, 35, 65, 123, 33, 0, 10, 0, 21, 152, 41, 35, 65, 35, 41, 43, 0, 10, 68, 37, 36, 35, 65, 35, 41, 35, 34, 0, 80, 36, 35, 65, 35, 81, 10, 0, 82, 71, 35, 65, 47, 10, 0, 1, 17, 32, 21, 165, 166, 65, 197, 105, 94, 138, 163, 35, 58, 65, 44, 177, 10, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 20, 0, 75, 65, 35, 65, 76, 0, 3, 11, 33, 128, 11, 29, 62, 65, 58, 35, 74, 174, 74, 188, 33, 0, 20, 10, 0, 10, 20, 10, 64, 44, 35, 65, 35, 65, 35, 65, 35, 23, 0, 81, 169, 35, 65, 35, 36, 205, 0, 206, 35, 65, 35, 65, 35, 76, 82, 0, 20, 0, 201, 41, 35, 65, 35, 41, 37, 21, 0, 10, 0, 33, 198, 35, 41, 65, 27, 20, 0, 3, 132, 33, 11, 17, 20, 1, 0, 10, 78, 65, 36, 41, 79, 19, 0, 20, 10, 161, 65, 35, 65, 123, 33, 0, 10, 0, 21, 152, 41, 35, 65, 35, 41, 43, 0, 10, 68, 37, 36, 35, 65, 35, 41, 35, 34, 0, 80, 36, 35, 65, 35, 81, 10, 0, 82, 71, 35, 65, 47, 10, 0, 3, 206, 172, 204, 75, 172, 142, 42, 65, 167, 70, 50, 81, 109, 116, 155, 59, 65, 44, 177, 10, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 20, 0, 75, 65, 35, 65, 76, 0, 2, 75, 218, 219, 218, 184, 99, 42, 65, 42, 44, 90, 220, 48, 108, 192, 2, 20, 10, 20, 0, 10, 20, 10, 64, 44, 35, 65, 35, 65, 35, 65, 35, 23, 0, 81, 169, 35, 65, 35, 36, 205, 0, 206, 35, 65, 35, 65, 35, 76, 82, 0, 20, 0, 201, 41, 35, 65, 35, 41, 37, 21, 0, 10, 0, 33, 198, 35, 41, 65, 27, 20, 0, 117, 221, 184, 209, 222, 69, 10, 2, 3, 0, 10, 78, 65, 36, 41, 79, 19, 0, 20, 10, 161, 65, 35, 65, 123, 33, 0, 10, 0, 21, 152, 41, 35, 65, 35, 41, 43, 0, 10, 68, 37, 36, 35, 65, 35, 41, 35, 34, 0, 80, 36, 35, 65, 35, 81, 10, 0, 82, 71, 35, 65, 47, 10, 0, 20, 89, 65, 35, 65, 223, 20, 0, 10, 186, 35, 65, 44, 177, 10, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 20, 0, 75, 65, 35, 65, 76, 0, 20, 171, 36, 35, 65, 35, 44, 224, 10, 0, 10, 20, 10, 64, 44, 35, 65, 35, 65, 35, 65, 35, 23, 0, 81, 169, 35, 65, 35, 36, 205, 0, 206, 35, 65, 35, 65, 35, 76, 82, 0, 20, 0, 201, 41, 35, 65, 35, 41, 37, 21, 0, 10, 0, 33, 198, 35, 41, 65, 27, 20, 0, 118, 101, 35, 65, 127, 0, 10, 78, 65, 36, 41, 79, 19, 0, 20, 10, 161, 65, 35, 65, 123, 33, 0, 10, 0, 21, 152, 41, 35, 65, 35, 41, 43, 0, 10, 68, 37, 36, 35, 65, 35, 41, 35, 34, 0, 80, 36, 35, 65, 35, 81, 10, 0, 82, 71, 35, 65, 47, 10, 0, 20, 89, 65, 35, 65, 223, 20, 0, 10, 186, 35, 65, 44, 177, 10, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 20, 0, 75, 65, 35, 65, 76, 0, 20, 171, 36, 35, 65, 35, 44, 224, 10, 0, 10, 20, 10, 64, 44, 35, 65, 35, 65, 35, 65, 35, 23, 0, 81, 169, 35, 65, 35, 36, 205, 0, 206, 35, 65, 35, 65, 35, 76, 82, 0, 20, 0, 201, 41, 35, 65, 35, 41, 37, 21, 0, 10, 0, 33, 198, 35, 41, 65, 27, 20, 0, 118, 101, 35, 65, 127, 0, 10, 78, 65, 36, 41, 79, 19, 0, 20, 10, 161, 65, 35, 65, 123, 33, 0, 10, 0, 21, 152, 41, 35, 65, 35, 41, 43, 0, 10, 68, 37, 36, 35, 65, 35, 41, 35, 34, 0, 80, 36, 35, 65, 35, 81, 10, 0, 82, 71, 35, 65, 47, 10, 0, 20, 89, 65, 35, 65, 223, 20, 0, 10, 186, 35, 65, 44, 177, 10, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 20, 0, 75, 65, 35, 65, 76, 0, 20, 171, 36, 35, 65, 35, 44, 224, 10, 0, 10, 20, 10, 64, 44, 35, 65, 35, 65, 35, 65, 35, 23, 0, 81, 169, 35, 65, 35, 36, 205, 0, 206, 35, 65, 35, 65, 35, 76, 82, 0, 20, 0, 201, 41, 35, 65, 35, 41, 37, 21, 0, 10, 0, 33, 198, 35, 41, 65, 27, 20, 0, 118, 101, 35, 65, 127, 0, 10, 78, 65, 36, 41, 79, 19, 0, 20, 10, 161, 65, 35, 65, 123, 33, 0, 10, 0, 21, 152, 41, 35, 65, 35, 41, 43, 0, 10, 68, 37, 36, 35, 65, 35, 41, 35, 34, 0, 80, 36, 35, 65, 35, 81, 10, 0, 82, 71, 35, 65, 47, 10, 0, 20, 89, 65, 35, 65, 223, 20, 0, 10, 186, 35, 65, 44, 177, 10, 0, 10, 83, 58, 35, 65, 84, 85, 0, 20, 0, 20, 0, 75, 65, 35, 65, 76, 0, 20, 171, 36, 35, 65, 35, 44, 224, 10, 0, 10, 20, 10, 64, 44, 35, 65, 35, 65, 35, 65, 35, 23, 0, 81, 169, 35, 65, 35, 36, 205, 0, 206, 35, 65, 35, 65, 35, 76, 82, 0, 20, 0, 201, 41, 35, 65, 35, 41, 37, 21, 0, 10, 0, 33, 198, 35, 41, 65, 27, 20, 0, 118, 101, 35, 65, 127, 0, 10, 78, 65, 36, 41, 79, 19, 0, 20, 10, 161, 65, 35, 65, 123, 33, 0, 10, 0, 21, 152, 41, 35, 65, 35, 41, 43, 0, 10, 68, 37, 36, 35, 65, 35, 41, 35, 34, 0, 20, 4, 135, 225, 88, 97, 101, 65, 59, 80, 55, 68, 55, 130, 10, 0, 82, 71, 35, 65, 47, 10, 0, 21, 135, 138, 94, 105, 95, 139, 35, 65, 226, 68, 19, 68, 55, 19, 8, 44, 42, 65, 44, 177, 10, 0, 10, 57, 225, 137, 135, 138, 65, 174, 227, 98, 39, 55, 19, 98, 10, 0, 20, 0, 75, 65, 35, 65, 76, 0, 20, 3, 1, 114, 55, 38, 152, 42, 65, 35, 84, 108, 19, 55, 18, 98, 18, 22, 0, 10, 20, 10, 64, 44, 35, 65, 35, 65, 35, 65, 35, 23, 0, 81, 169, 35, 65, 35, 36, 205, 0, 206, 35, 65, 35, 65, 35, 76, 82, 0, 20, 0, 200, 96, 138, 95, 94, 105, 59, 58, 35, 58, 144, 18, 68, 55, 19, 55, 85, 141, 41, 35, 65, 27, 20, 0, 118, 101, 35, 65, 127, 0, 10, 78, 65, 36, 41, 79, 19, 0, 20, 10, 161, 65, 35, 65, 123, 33, 0, 10, 0, 21, 152, 41, 35, 65, 35, 41, 43, 0, 10, 68, 37, 36, 35, 65, 35, 41, 35, 34, 0, 3, 130, 9, 87, 9, 223, 65, 42, 100, 123, 96, 228, 3, 1, 0, 82, 71, 35, 65, 47, 10, 0, 2, 18, 64, 18, 220, 74, 65, 62, 215, 101, 96, 101, 138, 65, 58, 65, 44, 177, 10, 0, 3, 17, 9, 129, 9, 130, 87, 175, 65, 41, 100, 101, 100, 125, 96, 222, 60, 0, 20, 0, 75, 65, 35, 65, 76, 0, 20, 10, 1, 201, 96, 125, 35, 36, 35, 65, 36, 41, 94, 125, 96, 101, 96, 144, 229, 0, 10, 20, 10, 64, 44, 35, 65, 35, 65, 35, 65, 35, 23, 0, 81, 169, 35, 65, 35, 36, 205, 0, 206, 35, 65, 35, 65, 35, 76, 82, 0, 20, 0, 82, 115, 77, 38, 113, 91, 35, 41, 35, 58, 44, 100, 101, 125, 101, 96, 35, 41, 65, 27, 20, 0, 118, 101, 35, 65, 127, 0, 10, 78, 65, 36, 41, 79, 19, 0, 20, 10, 161, 65, 35, 65, 123, 33, 0, 10, 0, 21, 152, 41, 35, 65, 35, 41, 43, 0, 10, 68, 37, 36, 35, 65, 35, 41, 35, 34, 0, 20, 10, 1, 2, 10, 32, 104, 65, 35, 41, 58, 35, 61, 0, 20, 1, 0, 82, 71, 35, 65, 47, 10, 0, 2, 20, 0, 20, 10, 2, 216, 74, 65, 36, 65, 41, 35, 58, 36, 35, 65, 44, 177, 10, 0, 20, 3, 1, 10, 230, 65, 36, 41, 58, 36, 35, 59, 71, 60, 0, 20, 0, 75, 65, 35, 65, 76, 0, 1, 20, 75, 35, 58, 65, 36, 65, 35, 36, 58, 35, 41, 35, 58, 31, 0, 10, 20, 10, 64, 44, 35, 65, 35, 65, 35, 65, 35, 23, 0, 81, 169, 35, 65, 35, 36, 205, 0, 206, 35, 65, 35, 65, 35, 76, 82, 0, 20, 0, 20, 1, 82, 157, 58, 35, 41, 35, 36, 35, 36, 65, 27, 20, 0, 118, 101, 35, 65, 127, 0, 10, 78, 65, 36, 41, 79, 19, 0, 20, 10, 161, 65, 35, 65, 123, 33, 0, 10, 0, 21, 152, 41, 35, 65, 35, 41, 43, 0, 10, 68, 37, 36, 35, 65, 35, 41, 35, 34, 0, 20, 2, 3, 20, 0, 3, 10, 143, 65, 41, 35, 53, 35, 61, 3, 0, 3, 0, 82, 71, 35, 65, 47, 10, 0, 20, 2, 3, 32, 20, 154, 174, 65, 41, 35, 36, 41, 35, 58, 35, 36, 41, 65, 44, 177, 10, 0, 1, 20, 3, 20, 10, 20, 230, 65, 36, 35, 44, 36, 88, 17, 0, 20, 0, 75, 65, 35, 65, 76, 0, 20, 0, 1, 92, 35, 59, 36, 41, 65, 41, 35, 58, 35, 36, 35, 41, 205, 0, 10, 20, 10, 64, 44, 35, 65, 35, 65, 35, 65, 35, 23, 0, 81, 169, 35, 65, 35, 36, 205, 0, 206, 35, 65, 35, 65, 35, 76, 82, 0, 20, 0, 20, 0, 1, 10, 1, 82, 157, 41, 35, 41, 35, 36, 35, 58, 59, 35, 36, 65, 27, 20, 0, 118, 101, 35, 65, 127, 0, 10, 1, 20, 30, 35, 41, 36, 89, 28, 0, 20, 10, 1, 203, 35, 36, 35, 125, 22, 0, 10, 0, 17, 138, 35, 41, 35, 41, 35, 36, 43, 0, 20, 10, 1, 19, 54, 36, 59, 35, 41, 36, 90, 0, 20, 3, 2, 231, 35, 226, 3, 0, 3, 0, 11, 46, 35, 232, 1, 3, 0, 10, 20, 173, 74, 35, 59, 111, 10, 1, 0, 2, 10, 20, 204, 35, 135, 60, 0, 20, 1, 92, 35, 58, 233, 20, 0, 20, 3, 20, 175, 35, 36, 41, 168, 0, 20, 0, 3, 77, 84, 65, 41, 35, 41, 58, 35, 83, 0, 20, 3, 70, 141, 35, 41, 65, 35, 41, 36, 83, 0, 196, 59, 35, 36, 35, 36, 35, 76, 9, 20, 0, 20, 0, 128, 157, 36, 35, 42, 35, 58, 35, 65, 27, 20, 0, 112, 123, 35, 36, 35, 160, 3, 20, 0, 10, 2, 10, 234, 35, 41, 79, 117, 0, 20, 10, 235, 35, 58, 101, 82, 0, 10, 0, 21, 105, 65, 41, 65, 35, 36, 41, 58, 90, 0, 10, 0, 117, 236, 41, 35, 36, 58, 43, 0, 1, 3, 1, 143, 35, 61, 10, 3, 10, 0, 11, 157, 36, 35, 153, 20, 3, 10, 0, 20, 1, 4, 74, 35, 197, 112, 3, 10, 0, 20, 2, 10, 204, 35, 41, 71, 133, 0, 10, 3, 1, 75, 35, 36, 237, 1, 0, 20, 10, 3, 92, 35, 36, 41, 158, 0, 20, 0, 3, 118, 53, 35, 65, 35, 41, 36, 65, 83, 0, 10, 3, 0, 213, 152, 35, 41, 65, 35, 59, 35, 66, 0, 206, 36, 41, 36, 35, 36, 65, 36, 71, 130, 10, 0, 3, 82, 71, 41, 35, 36, 35, 41, 65, 27, 20, 0, 112, 125, 36, 35, 160, 20, 1, 20, 0, 20, 23, 238, 162, 204, 28, 0, 10, 1, 3, 31, 238, 182, 106, 51, 128, 0, 10, 0, 3, 181, 238, 106, 238, 106, 238, 102, 239, 0, 20, 0, 9, 172, 106, 182, 238, 147, 162, 182, 168, 0, 2, 10, 122, 238, 14, 20, 10, 20, 0, 132, 153, 106, 182, 238, 155, 3, 10, 3, 0, 20, 0, 111, 218, 238, 102, 38, 10, 0, 1, 10, 1, 6, 238, 178, 162, 223, 32, 0, 20, 10, 2, 78, 238, 106, 153, 3, 0, 20, 10, 20, 191, 238, 147, 106, 183, 24, 0, 20, 0, 20, 114, 149, 238, 106, 238, 178, 106, 238, 227, 0, 10, 3, 0, 64, 209, 238, 106, 238, 147, 182, 147, 227, 0, 170, 147, 162, 238, 147, 106, 182, 61, 11, 10, 20, 0, 20, 9, 201, 106, 238, 106, 42, 44, 35, 65, 27, 20, 0, 38, 175, 240, 182, 238, 192, 3, 20, 1, 0, 21, 20, 10, 17, 2, 17, 3, 0, 10, 3, 1, 2, 17, 32, 17, 20, 0, 10, 0, 1, 60, 32, 60, 17, 133, 21, 132, 32, 0, 20, 1, 2, 21, 60, 17, 133, 17, 32, 0, 3, 1, 3, 2, 17, 3, 1, 20, 0, 20, 60, 133, 17, 21, 3, 1, 20, 0, 3, 20, 21, 17, 10, 3, 20, 0, 10, 20, 3, 17, 60, 20, 0, 21, 2, 3, 17, 11, 32, 1, 0, 10, 1, 2, 3, 17, 60, 133, 32, 0, 20, 1, 17, 60, 17, 60, 132, 60, 21, 0, 1, 3, 1, 17, 32, 132, 17, 60, 17, 32, 0, 21, 17, 133, 17, 32, 60, 32, 20, 0, 20, 0, 3, 20, 17, 28, 49, 58, 41, 65, 27, 20, 0, 1, 60, 21, 17, 21, 0, 20, 1, 0, 33, 198, 35, 41, 65, 27, 20, 0, 33, 198, 35, 41, 65, 27, 20, 0, 33, 198, 35, 41, 65, 27, 20, 0, 33, 198, 35, 41, 65, 27, 20, 0, 33, 198, 35, 41, 65, 27, 20, 0, 33, 198, 35, 41, 65, 27, 20, 0, 33, 198, 35, 41, 65, 27, 20, 0, 33, 198, 35, 41, 65, 27, 20, 0, 10, 3, 20, 3, 0, 128, 74, 36, 58, 35, 36, 35, 160, 1, 2, 10, 0, 3, 20, 1, 130, 169, 35, 58, 35, 36, 41, 36, 58, 12, 10, 3, 0, 10, 17, 13, 143, 104, 232, 84, 35, 41, 36, 41, 40, 30, 113, 10, 20, 0, 20, 130, 71, 35, 65, 41, 35, 36, 35, 58, 35, 222, 20, 10, 20, 10, 0, 20, 128, 157, 35, 65, 35, 184, 2, 0, 20, 128, 157, 35, 65, 35, 184, 2, 0, 20, 128, 157, 35, 65, 35, 184, 2, 0, 20, 128, 157, 35, 65, 35, 184, 2, 0, 87, 36, 65, 166, 33, 0, 20, 0, 27, 35, 92, 20, 0, 10, 28, 58, 35, 166, 132, 10, 193, 58, 65, 54, 2, 0, 87, 36, 65, 166, 33, 0, 20, 0, 27, 35, 92, 20, 0, 10, 28, 58, 35, 166, 132, 10, 193, 58, 65, 54, 2, 0, 87, 36, 65, 166, 33, 0, 20, 0, 27, 35, 92, 20, 0, 10, 28, 58, 35, 166, 132, 10, 193, 58, 65, 54, 2, 0, 87, 36, 65, 166, 33, 0, 20, 0, 27, 35, 92, 20, 0, 10, 28, 58, 35, 166, 132, 10, 193, 58, 65, 54, 2, 0, 20, 21, 26, 7, 6, 7, 14, 155, 5, 26, 129, 2, 20, 28, 44, 65, 166, 33, 0, 3, 2, 69, 14, 5, 12, 14, 5, 78, 27, 21, 3, 1, 29, 26, 78, 14, 15, 13, 93, 32, 3, 20, 69, 13, 6, 5, 27, 3, 2, 3, 21, 186, 26, 5, 155, 133, 3, 0, 20, 10, 20, 10, 3, 217, 13, 6, 13, 155, 14, 241, 35, 92, 20, 17, 217, 5, 7, 5, 7, 5, 6, 13, 87, 10, 3, 22, 155, 5, 14, 7, 155, 5, 15, 93, 22, 3, 1, 22, 228, 200, 212, 133, 1, 48, 201, 42, 105, 30, 14, 170, 3, 0, 10, 0, 186, 155, 13, 7, 5, 15, 7, 5, 242, 2, 1, 20, 1, 28, 26, 15, 12, 6, 13, 12, 30, 242, 1, 3, 220, 155, 26, 70, 3, 1, 20, 132, 26, 5, 27, 133, 20, 3, 114, 27, 14, 5, 78, 93, 78, 16, 17, 3, 0, 1, 20, 35, 36, 58, 198, 166, 163, 134, 84, 166, 193, 60, 1, 28, 42, 65, 166, 33, 0, 10, 3, 19, 119, 59, 49, 74, 62, 19, 11, 3, 0, 230, 198, 174, 169, 174, 198, 166, 18, 33, 20, 133, 128, 181, 58, 169, 174, 123, 60, 20, 1, 3, 28, 207, 36, 174, 166, 19, 132, 0, 20, 0, 10, 1, 129, 199, 58, 74, 198, 141, 169, 62, 35, 92, 20, 3, 28, 199, 35, 174, 169, 49, 84, 36, 148, 128, 20, 28, 42, 36, 58, 141, 174, 169, 174, 166, 58, 111, 33, 20, 21, 3, 20, 2, 20, 136, 169, 41, 36, 42, 169, 141, 89, 1, 0, 10, 0, 241, 41, 35, 169, 174, 58, 62, 198, 35, 243, 130, 21, 1, 82, 224, 74, 166, 49, 74, 166, 58, 231, 9, 1, 20, 195, 41, 42, 160, 20, 2, 20, 9, 174, 41, 44, 87, 1, 128, 244, 62, 197, 49, 141, 49, 42, 199, 114, 20, 3, 0, 10, 32, 84, 35, 198, 154, 111, 50, 116, 161, 42, 89, 143, 20, 82, 42, 65, 166, 33, 0, 20, 85, 140, 163, 95, 110, 85, 81, 25, 164, 41, 37, 6, 20, 98, 85, 25, 110, 116, 110, 156, 35, 236, 7, 32, 148, 144, 74, 100, 109, 148, 109, 21, 20, 1, 25, 236, 62, 100, 148, 172, 53, 79, 86, 0, 20, 0, 129, 67, 171, 74, 81, 110, 25, 110, 235, 35, 92, 20, 129, 67, 163, 74, 70, 50, 25, 203, 36, 125, 104, 20, 130, 36, 41, 174, 4, 148, 50, 148, 103, 35, 123, 243, 20, 1, 10, 1, 118, 23, 58, 36, 89, 70, 25, 85, 1, 0, 20, 10, 0, 136, 41, 35, 161, 131, 197, 231, 193, 166, 171, 91, 129, 20, 223, 144, 35, 203, 25, 50, 148, 173, 74, 141, 67, 11, 3, 241, 35, 124, 20, 128, 84, 41, 58, 128, 1, 47, 123, 41, 43, 25, 109, 116, 187, 62, 141, 40, 10, 1, 0, 3, 36, 41, 74, 128, 3, 20, 122, 35, 36, 189, 20, 9, 36, 65, 166, 33, 0, 110, 36, 139, 170, 27, 93, 170, 178, 84, 36, 194, 20, 3, 20, 126, 160, 170, 160, 182, 41, 35, 143, 3, 68, 72, 67, 141, 160, 93, 2, 3, 20, 110, 36, 58, 163, 160, 178, 59, 42, 243, 0, 10, 0, 130, 41, 58, 84, 32, 1, 20, 10, 26, 35, 92, 20, 130, 36, 58, 84, 60, 10, 20, 0, 27, 58, 35, 92, 1, 68, 44, 35, 62, 60, 2, 20, 1, 13, 35, 58, 230, 3, 1, 20, 10, 1, 20, 10, 2, 4, 41, 79, 20, 1, 20, 0, 20, 0, 241, 35, 127, 64, 74, 15, 33, 197, 58, 44, 82, 2, 195, 35, 58, 245, 20, 3, 128, 197, 58, 44, 9, 1, 208, 41, 58, 245, 20, 10, 1, 114, 198, 35, 62, 130, 1, 181, 36, 58, 175, 170, 160, 93, 86, 62, 41, 84, 3, 20, 0, 10, 0, 41, 65, 49, 129, 3, 20, 10, 155, 58, 35, 136, 0, 87, 58, 36, 74, 128, 1, 109, 36, 41, 35, 198, 174, 166, 74, 169, 74, 166, 235, 20, 1, 11, 189, 41, 74, 166, 198, 53, 36, 143, 1, 10, 2, 164, 166, 49, 198, 44, 84, 128, 2, 20, 81, 41, 35, 58, 62, 198, 49, 74, 150, 0, 10, 114, 36, 35, 84, 32, 1, 20, 13, 41, 35, 92, 20, 9, 35, 58, 62, 60, 0, 3, 20, 26, 41, 35, 75, 10, 114, 36, 35, 84, 17, 0, 20, 10, 12, 35, 65, 75, 20, 10, 0, 10, 173, 36, 79, 1, 0, 21, 0, 10, 0, 241, 41, 35, 124, 68, 84, 6, 128, 62, 35, 44, 128, 20, 219, 58, 41, 127, 21, 3, 0, 82, 174, 41, 53, 9, 1, 167, 197, 36, 26, 22, 20, 2, 98, 84, 53, 49, 82, 0, 241, 41, 58, 62, 166, 62, 198, 152, 21, 1, 0, 10, 0, 41, 65, 74, 33, 21, 10, 3, 93, 58, 35, 190, 20, 9, 41, 42, 74, 33, 20, 10, 81, 58, 36, 100, 113, 116, 81, 113, 81, 109, 68, 1, 85, 210, 138, 95, 45, 113, 70, 213, 230, 41, 143, 1, 10, 21, 18, 113, 81, 113, 216, 70, 226, 42, 137, 160, 1, 50, 36, 35, 95, 109, 70, 81, 45, 117, 0, 20, 0, 114, 35, 36, 59, 32, 20, 21, 20, 12, 35, 65, 175, 1, 130, 58, 35, 62, 133, 10, 20, 10, 13, 58, 35, 92, 10, 114, 58, 41, 197, 17, 0, 1, 20, 26, 35, 51, 20, 10, 0, 193, 59, 41, 54, 3, 2, 0, 10, 0, 119, 35, 127, 68, 53, 6, 33, 62, 65, 59, 9, 20, 136, 58, 41, 245, 1, 0, 1, 82, 84, 35, 53, 128, 20, 148, 31, 84, 89, 208, 17, 5, 176, 58, 75, 242, 3, 1, 241, 41, 36, 103, 45, 109, 113, 10, 1, 0, 10, 0, 41, 65, 62, 73, 69, 246, 41, 210, 30, 20, 60, 189, 67, 166, 66, 112, 10, 118, 102, 123, 139, 29, 179, 69, 29, 126, 179, 20, 1, 115, 147, 100, 171, 69, 29, 69, 192, 207, 35, 194, 10, 128, 126, 179, 192, 57, 29, 192, 29, 167, 44, 247, 8, 1, 115, 209, 96, 152, 69, 80, 69, 17, 1, 0, 10, 20, 10, 11, 222, 89, 166, 108, 80, 69, 29, 232, 35, 51, 20, 9, 209, 37, 59, 180, 126, 80, 153, 41, 178, 6, 0, 114, 36, 35, 53, 60, 10, 20, 0, 93, 41, 35, 51, 20, 0, 20, 177, 136, 100, 125, 186, 126, 57, 1, 0, 181, 41, 35, 124, 39, 53, 15, 82, 84, 65, 53, 82, 1, 86, 106, 36, 201, 192, 80, 126, 73, 174, 67, 208, 132, 1, 32, 118, 218, 123, 105, 108, 102, 42, 182, 8, 3, 2, 10, 86, 247, 41, 196, 69, 111, 20, 1, 0, 10, 0, 41, 65, 58, 53, 44, 197, 53, 49, 148, 3, 20, 1, 3, 228, 62, 197, 194, 3, 20, 21, 172, 53, 197, 53, 197, 59, 171, 11, 20, 3, 32, 51, 44, 59, 53, 44, 197, 84, 44, 212, 1, 110, 59, 58, 197, 59, 53, 62, 198, 60, 1, 20, 3, 20, 92, 84, 44, 53, 139, 11, 3, 0, 10, 0, 3, 20, 211, 84, 44, 84, 59, 53, 62, 53, 44, 172, 1, 20, 32, 243, 53, 44, 59, 42, 53, 44, 39, 10, 130, 53, 169, 21, 0, 20, 10, 93, 59, 53, 172, 10, 20, 1, 0, 20, 0, 3, 195, 197, 44, 197, 101, 2, 0, 190, 84, 44, 245, 68, 166, 13, 128, 169, 44, 62, 82, 1, 3, 110, 174, 53, 197, 42, 53, 84, 197, 34, 1, 3, 20, 10, 20, 61, 74, 59, 84, 134, 22, 2, 20, 1, 2, 109, 169, 58, 74, 44, 203, 3, 20, 0, 10, 0, 41, 65, 174, 48, 180, 69, 192, 179, 33, 0, 110, 180, 110, 10, 3, 10, 4, 29, 192, 29, 131, 132, 0, 70, 108, 126, 192, 29, 108, 110, 0, 82, 29, 126, 60, 1, 20, 2, 20, 113, 186, 29, 192, 17, 32, 0, 10, 148, 121, 179, 29, 186, 81, 20, 3, 10, 50, 220, 29, 69, 108, 22, 1, 21, 133, 220, 69, 57, 60, 20, 10, 3, 118, 186, 69, 4, 10, 3, 10, 0, 20, 3, 20, 4, 69, 192, 29, 24, 0, 113, 186, 38, 22, 179, 85, 3, 126, 192, 126, 22, 1, 20, 129, 69, 29, 179, 108, 111, 10, 0, 20, 81, 186, 29, 192, 131, 60, 1, 0, 82, 179, 69, 29, 50, 1, 3, 20, 0, 10, 0, 41, 65, 169, 9, 3, 1, 10, 3, 20, 1, 0, 10, 3, 10, 20, 1, 21, 3, 0, 10, 1, 2, 0, 21, 10, 20, 3, 0, 2, 20, 2, 3, 0, 2, 3, 10, 2, 1, 2, 0, 3, 0, 2, 3, 20, 3, 0, 20, 1, 2, 10, 1, 20, 133, 0, 21, 1, 3, 1, 3, 2, 3, 10, 21, 1, 20, 3, 21, 1, 20, 0, 20, 3, 2, 0, 10, 20, 0, 20, 3, 1, 2, 20, 10, 1, 20, 21, 3, 20, 1, 3, 0, 20, 3, 0, 2, 1, 20, 3, 20, 2, 3, 0, 1, 20, 3, 20, 0, 3, 1, 10, 0, 10, 0, 41, 65, 49, 9, 10, 1, 20, 1, 2, 1, 0, 1, 20, 1, 2, 3, 0, 1, 20, 1, 3, 0, 3, 10, 20, 0, 10, 20, 1, 0, 20, 21, 1, 10, 1, 20, 3, 20, 0, 20, 0, 3, 0, 2, 10, 20, 0, 10, 20, 3, 0, 10, 1, 20, 0, 20, 2, 10, 2, 1, 3, 0, 1, 20, 2, 1, 10, 2, 0, 10, 20, 3, 2, 1, 20, 0, 1, 20, 2, 3, 1, 10, 0, 10, 0, 1, 3, 1, 3, 1, 3, 20, 1, 20, 1, 20, 10, 1, 10, 0, 20, 0, 21, 0, 3, 20, 10, 20, 10, 20, 0, 3, 1, 20, 0, 10, 1, 2, 20, 0, 10, 0, 41, 65, 49, 130, 20, 0, 1, 0, 20, 1, 0, 1, 20, 1, 2, 20, 1, 20, 0, 20, 1, 20, 0, 20, 3, 1, 0, 20, 3, 1, 0, 3, 10, 1, 0, 20, 0, 20, 3, 0, 1, 20, 10, 0, 1, 20, 10, 1, 20, 0, 20, 0, 1, 20, 3, 0, 1, 10, 1, 0, 1, 20, 3, 10, 20, 1, 20, 2, 0, 2, 10, 20, 10, 0, 20, 0, 10, 0, 2, 0, 20, 1, 3, 10, 1, 20, 1, 0, 10, 20, 0, 20, 1, 20, 0, 10, 20, 1, 20, 10, 1, 0, 20, 0, 3, 10, 1, 3, 0, 21, 171, 96, 130, 20, 1, 0, 32, 3, 17, 1, 10, 0, 1, 2, 1, 20, 1, 3, 0, 20, 1, 3, 20, 21, 1, 10, 20, 0, 
    };

    static const int imageCounts[] = {
        38428, 1, 1, 1, 1, 8, 1, 1, 1, 1, 52, 1, 2, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 12, 1, 1, 10, 1, 1, 1, 1, 16, 1, 1, 1, 1, 8, 1, 1, 1, 1, 52, 1, 1, 1, 1, 8, 1, 1, 1, 1, 8, 1, 1, 1, 1, 8, 1, 1, 1, 1, 53, 1, 1, 1, 1, 1, 1, 5, 1, 2, 1, 176, 1, 1, 1, 1, 8, 1, 1, 1, 1, 52, 1, 1, 1, 1, 1, 1, 2, 4, 1, 1, 1, 1, 12, 1, 1, 1, 1, 8, 1, 1, 1, 1, 16, 1, 1, 1, 1, 8, 1, 1, 2, 52, 1, 1, 2, 8, 1, 1, 1, 1, 8, 1, 1, 1, 1, 9, 1, 1, 1, 52, 1, 1, 1, 1, 1, 1, 6, 1, 1, 1, 1, 176, 1, 1, 1, 1, 9, 1, 1, 1, 52, 2, 1, 1, 1, 2, 1, 4, 1, 1, 1, 1, 12, 1, 1, 1, 1, 8, 1, 1, 1, 1, 16, 1, 1, 1, 1, 8, 1, 3, 52, 1, 1, 1, 9, 1, 1, 1, 1, 8, 1, 1, 1, 1, 8, 1, 1, 1, 1, 52, 1, 1, 1, 1, 1, 1, 1, 1, 4, 2, 1, 1, 176, 1, 1, 1, 1, 8, 1, 1, 1, 1, 52, 1, 1, 1, 1, 1, 1, 2, 5, 1, 1, 1, 12, 1, 1, 1, 1, 8, 1, 1, 1, 1, 16, 1, 1, 2, 8, 1, 1, 1, 1, 52, 1, 1, 1, 1, 8, 1, 1, 1, 1, 8, 1, 1, 1, 1, 8, 1, 1, 1, 1, 52, 1, 1, 1, 1, 1, 1, 6, 1, 1, 1, 1, 177, 2, 1, 8, 1, 1, 1, 1, 54, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 13, 1, 1, 1, 8, 1, 1, 1, 17, 1, 1, 2, 8, 1, 2, 53, 1, 1, 1, 1, 8, 1, 1, 1, 1, 9, 1, 1, 1, 8, 1, 1, 1, 53, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 177, 2, 1, 8, 1, 1, 1, 1, 54, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 13, 1, 1, 1, 8, 1, 1, 1, 17, 1, 1, 2, 8, 1, 2, 53, 1, 1, 1, 1, 8, 1, 1, 1, 1, 9, 1, 1, 1, 8, 1, 1, 1, 53, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 177, 2, 1, 8, 1, 1, 1, 1, 54, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 13, 1, 1, 1, 8, 1, 1, 1, 17, 1, 1, 2, 8, 1, 2, 53, 1, 1, 1, 1, 8, 1, 1, 1, 1, 9, 1, 1, 1, 8, 1, 1, 1, 53, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 177, 2, 1, 8, 1, 1, 1, 1, 54, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 13, 1, 1, 1, 8, 1, 1, 1, 17, 1, 1, 2, 8, 1, 2, 53, 1, 1, 1, 1, 8, 1, 1, 1, 1, 9, 1, 1, 1, 8, 1, 1, 1, 53, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 176, 1, 1, 1, 1, 8, 1, 1, 1, 1, 53, 2, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 13, 1, 1, 1, 8, 1, 1, 1, 17, 1, 1, 10, 1, 1, 1, 1, 52, 1, 1, 1, 1, 8, 1, 1, 1, 1, 8, 2, 1, 1, 8, 1, 1, 1, 1, 52, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 107, 1, 9, 1, 1, 1, 56, 1, 1, 1, 1, 8, 2, 1, 1, 53, 2, 1, 1, 2, 1, 4, 1, 2, 1, 13, 1, 1, 1, 8, 1, 1, 1, 17, 1, 1, 1, 1, 8, 1, 3, 52, 1, 1, 1, 1, 8, 1, 1, 1, 1, 8, 1, 1, 1, 1, 10, 1, 1, 52, 1, 1, 1, 1, 1, 2, 1, 4, 1, 1, 1, 1, 104, 3, 1, 8, 1, 1, 59, 1, 1, 1, 8, 1, 1, 1, 1, 53, 2, 1, 1, 3, 4, 1, 1, 1, 1, 13, 1, 1, 1, 8, 1, 1, 1, 17, 1, 1, 1, 1, 8, 1, 2, 1, 52, 1, 1, 1, 1, 8, 1, 1, 1, 1, 8, 1, 1, 1, 1, 8, 1, 1, 1, 1, 52, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 104, 1, 1, 1, 1, 8, 1, 1, 1, 57, 1, 1, 1, 1, 8, 1, 1, 1, 1, 53, 2, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 13, 1, 1, 1, 8, 1, 1, 1, 17, 1, 1, 1, 9, 1, 1, 1, 1, 52, 1, 1, 1, 1, 8, 1, 1, 1, 1, 8, 2, 1, 1, 8, 1, 1, 1, 1, 52, 1, 1, 1, 1, 1, 1, 1, 1, 4, 2, 1, 1, 104, 1, 1, 1, 9, 1, 1, 1, 57, 1, 1, 1, 1, 8, 1, 1, 1, 1, 54, 1, 1, 1, 2, 1, 4, 3, 1, 13, 1, 1, 1, 8, 1, 1, 1, 17, 1, 1, 1, 1, 8, 1, 1, 1, 1, 52, 1, 1, 1, 1, 8, 1, 1, 1, 1, 8, 1, 2, 1, 9, 1, 1, 1, 52, 1, 1, 1, 1, 4, 5, 1, 1, 1, 104, 1, 1, 1, 1, 8, 1, 1, 2, 56, 1, 2, 9, 1, 1, 1, 1, 52, 1, 2, 2, 1, 2, 4, 1, 1, 1, 1, 13, 1, 1, 1, 8, 1, 1, 1, 17, 1, 1, 1, 1, 8, 2, 2, 52, 1, 1, 1, 1, 8, 1, 1, 1, 1, 8, 1, 1, 1, 1, 8, 2, 1, 1, 52, 2, 1, 5, 4, 1, 1, 1, 1, 104, 1, 1, 1, 1, 8, 1, 1, 1, 1, 56, 1, 1, 1, 1, 8, 1, 3, 52, 1, 3, 2, 2, 4, 1, 2, 1, 13, 1, 1, 1, 8, 1, 1, 1, 17, 1, 1, 2, 8, 2, 1, 1, 52, 1, 1, 1, 1, 8, 1, 1, 1, 1, 8, 2, 1, 1, 8, 1, 2, 1, 53, 1, 2, 4, 4, 1, 1, 2, 104, 1, 1, 1, 1, 8, 1, 2, 1, 56, 1, 1, 1, 1, 8, 1, 1, 1, 57, 2, 1, 5, 1, 1, 1, 14, 1, 1, 1, 8, 1, 1, 1, 17, 2, 1, 9, 1, 1, 2, 52, 1, 1, 1, 1, 8, 1, 1, 1, 1, 8, 2, 1, 1, 8, 1, 1, 1, 54, 1, 10, 3, 1, 104, 1, 1, 1, 1, 8, 1, 1, 1, 1, 56, 1, 1, 2, 8, 1, 1, 1, 1, 4, 1, 1, 1, 1, 32, 1, 1, 1, 1, 8, 1, 1, 1, 2, 1, 1, 1, 4, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 2, 8, 1, 1, 1, 1, 8, 1, 1, 1, 1, 4, 1, 1, 1, 9, 1, 1, 1, 1, 8, 1, 1, 1, 1, 24, 2, 1, 1, 12, 1, 1, 1, 1, 8, 1, 1, 1, 1, 8, 1, 1, 2, 8, 1, 1, 1, 1, 4, 1, 2, 1, 36, 1, 1, 2, 4, 1, 1, 2, 1, 2, 5, 1, 1, 1, 1, 4, 2, 3, 1, 1, 1, 28, 1, 1, 1, 1, 16, 1, 1, 1, 1, 32, 1, 1, 1, 1, 4, 1, 1, 2, 8, 1, 59, 1, 1, 1, 1, 8, 1, 1, 1, 1, 5, 1, 1, 1, 32, 1, 1, 1, 1, 9, 2, 1, 1, 3, 4, 2, 1, 1, 7, 1, 1, 3, 1, 1, 1, 1, 8, 1, 1, 2, 8, 1, 1, 1, 1, 4, 1, 1, 2, 8, 1, 1, 2, 8, 1, 1, 1, 1, 24, 2, 1, 1, 12, 1, 1, 1, 1, 8, 1, 1, 1, 1, 8, 1, 2, 9, 2, 1, 1, 4, 1, 2, 37, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 3, 4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 2, 28, 1, 1, 1, 1, 16, 1, 1, 34, 1, 2, 1, 4, 1, 1, 2, 8, 1, 59, 1, 1, 1, 1, 8, 1, 1, 1, 1, 4, 1, 2, 1, 33, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 2, 1, 4, 2, 1, 1, 1, 1, 1, 2, 1, 2, 8, 1, 1, 1, 1, 8, 1, 3, 4, 1, 1, 1, 9, 1, 1, 1, 9, 1, 1, 1, 1, 24, 1, 1, 1, 1, 12, 1, 1, 1, 1, 8, 1, 1, 1, 1, 8, 1, 1, 1, 1, 8, 1, 1, 1, 1, 4, 1, 2, 1, 36, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 3, 6, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 28, 1, 1, 1, 1, 16, 1, 1, 1, 1, 32, 1, 2, 1, 4, 1, 1, 2, 8, 1, 59, 1, 1, 1, 1, 8, 1, 1, 1, 1, 4, 2, 1, 1, 33, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 4, 1, 1, 1, 1, 1, 3, 1, 1, 2, 8, 1, 1, 1, 9, 1, 1, 2, 4, 1, 1, 1, 9, 1, 1, 1, 1, 8, 1, 1, 1, 1, 24, 1, 1, 1, 1, 12, 1, 1, 1, 1, 8, 1, 1, 1, 1, 8, 1, 1, 1, 1, 9, 1, 1, 1, 5, 2, 1, 36, 1, 1, 1, 1, 4, 2, 1, 1, 1, 8, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 31, 1, 1, 1, 16, 1, 1, 1, 33, 1, 1, 2, 4, 1, 1, 2, 8, 1, 60, 2, 1, 8, 1, 1, 1, 1, 5, 1, 1, 1, 8, 1, 20, 2, 2, 1, 1, 1, 1, 3, 6, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 6, 1, 1, 1, 3, 1, 2, 1, 8, 1, 1, 10, 1, 3, 4, 1, 1, 2, 8, 1, 2, 9, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 4, 1, 1, 1, 1, 8, 1, 1, 1, 1, 9, 1, 1, 1, 8, 1, 1, 1, 5, 2, 1, 1, 16, 1, 1, 1, 1, 12, 1, 1, 1, 2, 2, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 7, 1, 1, 3, 4, 1, 1, 1, 17, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 3, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 8, 1, 2, 5, 1, 1, 1, 1, 8, 1, 2, 1, 57, 2, 1, 8, 1, 1, 1, 1, 5, 1, 1, 1, 8, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 3, 1, 6, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 6, 1, 1, 1, 5, 1, 1, 8, 1, 1, 1, 1, 8, 1, 1, 1, 1, 4, 1, 1, 2, 8, 1, 2, 9, 1, 1, 1, 1, 21, 1, 1, 2, 1, 1, 1, 4, 1, 2, 1, 4, 1, 1, 1, 1, 8, 1, 1, 1, 1, 9, 1, 1, 1, 8, 1, 1, 1, 5, 1, 1, 1, 1, 17, 1, 1, 1, 12, 1, 1, 1, 3, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 7, 1, 1, 3, 4, 2, 2, 16, 1, 1, 1, 3, 1, 3, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 3, 1, 8, 1, 2, 5, 1, 1, 1, 1, 8, 1, 1, 1, 1, 57, 2, 1, 8, 1, 1, 1, 1, 5, 1, 1, 1, 8, 1, 1, 1, 1, 16, 4, 1, 1, 1, 1, 1, 1, 1, 1, 6, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 6, 1, 1, 1, 3, 1, 1, 1, 1, 8, 1, 1, 1, 9, 1, 1, 1, 1, 4, 1, 1, 2, 8, 1, 2, 9, 1, 1, 1, 1, 20, 1, 2, 2, 1, 1, 1, 4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 8, 1, 1, 1, 1, 9, 1, 1, 1, 8, 1, 1, 1, 5, 2, 1, 1, 16, 1, 1, 2, 12, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 7, 1, 1, 3, 4, 1, 2, 1, 16, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 7, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 16, 1, 3, 8, 1, 2, 5, 1, 1, 10, 1, 1, 1, 1, 57, 2, 1, 8, 1, 1, 1, 1, 5, 1, 1, 1, 8, 2, 1, 1, 12, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 5, 4, 1, 1, 2, 4, 1, 1, 2, 8, 1, 2, 9, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 8, 1, 1, 1, 1, 9, 1, 1, 1, 8, 1, 1, 1, 5, 2, 1, 1, 16, 1, 1, 1, 1, 12, 1, 1, 1, 2, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 7, 1, 1, 3, 4, 1, 2, 1, 16, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 4, 12, 1, 1, 1, 1, 8, 1, 2, 5, 1, 1, 1, 1, 8, 1, 1, 1, 1, 57, 2, 1, 8, 1, 1, 1, 1, 5, 1, 1, 1, 8, 1, 1, 1, 1, 12, 2, 1, 1, 1, 1, 3, 1, 1, 4, 1, 6, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 8, 4, 1, 1, 1, 1, 8, 1, 1, 1, 10, 1, 1, 1, 4, 1, 1, 2, 8, 1, 2, 9, 1, 1, 1, 1, 20, 1, 1, 3, 1, 1, 1, 4, 1, 1, 1, 5, 1, 1, 1, 1, 8, 1, 1, 1, 1, 9, 1, 1, 1, 8, 1, 1, 1, 5, 1, 1, 1, 17, 1, 3, 12, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 7, 1, 1, 3, 5, 1, 1, 1, 16, 1, 4, 1, 1, 1, 2, 1, 1, 1, 1, 1, 5, 1, 3, 1, 1, 1, 3, 1, 1, 1, 2, 1, 12, 1, 1, 2, 8, 1, 2, 5, 12, 61, 2, 1, 8, 1, 1, 1, 1, 5, 1, 1, 1, 8, 2, 1, 1, 12, 3, 1, 1, 1, 8, 1, 1, 6, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 12, 1, 1, 1, 9, 1, 1, 2, 8, 1, 7, 1, 1, 2, 8, 1, 2, 9, 4, 20, 1, 1, 1, 4, 1, 4, 1, 1, 1, 5, 1, 1, 1, 1, 8, 1, 1, 1, 1, 9, 1, 1, 1, 8, 1, 1, 1, 5, 1, 19, 1, 1, 1, 13, 1, 1, 1, 3, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 7, 1, 1, 3, 4, 2, 1, 1, 16, 1, 10, 1, 1, 1, 1, 5, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 12, 1, 1, 1, 1, 8, 1, 2, 78, 2, 1, 8, 1, 1, 1, 1, 5, 1, 1, 1, 8, 1, 1, 1, 1, 13, 1, 1, 1, 1, 1, 4, 1, 1, 2, 1, 1, 6, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 12, 1, 1, 1, 1, 8, 1, 1, 1, 1, 16, 1, 1, 2, 8, 1, 2, 10, 1, 2, 20, 1, 1, 2, 1, 1, 2, 4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 8, 1, 1, 1, 1, 9, 1, 1, 1, 8, 1, 1, 1, 25, 1, 1, 1, 13, 1, 1, 2, 1, 2, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 7, 1, 1, 3, 4, 1, 1, 1, 1, 16, 1, 4, 3, 3, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 15, 1, 1, 1, 1, 8, 1, 2, 78, 2, 1, 8, 1, 1, 1, 1, 5, 1, 1, 1, 8, 2, 1, 1, 12, 1, 1, 1, 1, 1, 1, 6, 1, 1, 1, 1, 6, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 13, 1, 1, 1, 8, 1, 1, 1, 9, 2, 6, 1, 1, 2, 8, 1, 2, 11, 1, 1, 21, 1, 1, 2, 1, 2, 4, 1, 1, 6, 1, 1, 1, 1, 8, 1, 1, 1, 1, 9, 1, 1, 1, 8, 1, 1, 1, 6, 1, 18, 1, 1, 2, 12, 1, 1, 2, 3, 5, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 7, 1, 1, 3, 4, 1, 1, 1, 1, 16, 1, 7, 1, 2, 1, 1, 1, 1, 5, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 2, 12, 1, 1, 1, 1, 8, 1, 2, 78, 2, 1, 8, 1, 1, 1, 1, 5, 1, 1, 1, 8, 1, 1, 1, 1, 13, 1, 1, 1, 1, 1, 2, 5, 1, 1, 1, 6, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 13, 1, 1, 1, 8, 1, 1, 1, 17, 1, 1, 2, 8, 1, 2, 9, 3, 1, 20, 1, 1, 1, 1, 8, 1, 1, 1, 5, 1, 1, 1, 1, 8, 1, 1, 1, 1, 9, 1, 1, 1, 8, 1, 1, 1, 17, 1, 1, 1, 5, 1, 3, 4, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 7, 1, 1, 3, 5, 1, 1, 1, 16, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 2, 5, 1, 1, 1, 1, 2, 1, 12, 1, 1, 1, 1, 8, 1, 2, 78, 2, 1, 8, 1, 1, 1, 1, 5, 1, 1, 1, 8, 1, 1, 1, 1, 13, 1, 1, 1, 1, 1, 2, 5, 1, 1, 1, 6, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 13, 1, 1, 1, 8, 1, 1, 1, 17, 1, 1, 2, 8, 1, 2, 9, 1, 1, 1, 1, 20, 1, 1, 1, 1, 8, 1, 1, 1, 5, 1, 1, 1, 1, 8, 1, 1, 1, 1, 9, 1, 1, 1, 8, 1, 1, 1, 17, 2, 1, 1, 4, 1, 2, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 7, 1, 1, 3, 5, 1, 1, 1, 16, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 2, 5, 1, 1, 1, 1, 2, 1, 12, 1, 1, 1, 1, 8, 1, 2, 78, 2, 1, 8, 1, 1, 1, 1, 5, 1, 1, 1, 8, 1, 1, 1, 1, 13, 1, 1, 1, 1, 1, 2, 5, 1, 1, 1, 6, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 13, 1, 1, 1, 8, 1, 1, 1, 17, 1, 1, 2, 8, 1, 2, 9, 1, 1, 1, 1, 20, 1, 2, 1, 8, 1, 1, 1, 5, 1, 1, 1, 1, 8, 1, 1, 1, 1, 9, 1, 1, 1, 8, 1, 1, 1, 17, 1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 3, 1, 1, 1, 1, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 7, 1, 1, 3, 5, 1, 1, 1, 16, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 2, 5, 1, 1, 1, 1, 2, 1, 12, 1, 1, 1, 1, 8, 1, 2, 78, 2, 1, 8, 1, 1, 1, 1, 5, 1, 1, 1, 8, 1, 1, 1, 1, 13, 1, 1, 1, 1, 1, 2, 5, 1, 1, 1, 6, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 13, 1, 1, 1, 8, 1, 1, 1, 17, 1, 1, 2, 8, 1, 2, 9, 2, 1, 1, 20, 1, 2, 1, 8, 1, 1, 1, 5, 1, 1, 1, 1, 8, 1, 1, 1, 1, 9, 1, 1, 1, 8, 1, 1, 1, 17, 1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 7, 1, 1, 3, 5, 1, 1, 1, 16, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 2, 5, 1, 1, 1, 1, 2, 1, 12, 1, 1, 1, 1, 8, 1, 2, 78, 2, 1, 8, 1, 1, 1, 1, 5, 1, 1, 1, 8, 1, 1, 1, 1, 13, 1, 1, 1, 1, 1, 2, 5, 1, 1, 1, 6, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 13, 1, 1, 1, 8, 1, 1, 1, 17, 1, 1, 2, 8, 1, 2, 5, 2, 1, 2, 1, 1, 1, 4, 4, 12, 1, 2, 1, 8, 1, 1, 1, 5, 1, 1, 1, 1, 8, 1, 1, 1, 1, 9, 1, 1, 1, 8, 1, 1, 1, 13, 1, 1, 1, 2, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 13, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 7, 1, 1, 3, 5, 1, 1, 1, 16, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 2, 5, 1, 1, 1, 1, 2, 1, 12, 1, 1, 1, 1, 8, 1, 2, 7, 1, 10, 1, 1, 1, 57, 2, 1, 8, 1, 1, 1, 1, 5, 1, 1, 1, 8, 1, 1, 1, 1, 13, 1, 1, 1, 1, 1, 2, 5, 1, 1, 1, 6, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 13, 1, 1, 1, 8, 1, 1, 1, 17, 1, 1, 2, 8, 1, 2, 5, 1, 1, 1, 1, 1, 1, 1, 1, 4, 3, 1, 12, 1, 1, 1, 1, 8, 1, 1, 1, 5, 1, 1, 1, 1, 8, 1, 1, 1, 1, 9, 1, 1, 1, 8, 1, 1, 1, 13, 1, 1, 2, 1, 1, 1, 1, 8, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 13, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 7, 1, 1, 3, 5, 1, 1, 1, 16, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 2, 5, 1, 1, 1, 1, 2, 1, 12, 1, 1, 1, 1, 8, 1, 2, 6, 1, 1, 1, 8, 1, 1, 1, 1, 57, 2, 1, 8, 1, 1, 1, 1, 5, 1, 1, 1, 8, 1, 1, 1, 1, 13, 1, 1, 1, 1, 1, 2, 5, 1, 1, 1, 6, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 13, 1, 1, 1, 8, 1, 1, 1, 17, 1, 1, 2, 8, 1, 2, 5, 1, 1, 2, 2, 1, 1, 4, 1, 1, 2, 13, 1, 1, 1, 8, 1, 1, 1, 5, 1, 1, 1, 1, 8, 1, 1, 1, 1, 9, 1, 1, 1, 8, 1, 1, 1, 13, 1, 1, 2, 1, 1, 1, 1, 8, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 12, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 7, 1, 1, 3, 5, 1, 1, 1, 16, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 2, 5, 1, 1, 1, 1, 2, 1, 12, 1, 1, 1, 1, 8, 1, 2, 5, 1, 2, 1, 8, 1, 2, 1, 57, 2, 1, 8, 1, 1, 1, 1, 5, 1, 1, 1, 8, 1, 1, 1, 1, 13, 1, 1, 1, 1, 1, 2, 5, 1, 1, 1, 6, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 13, 1, 1, 1, 8, 1, 1, 1, 17, 1, 1, 2, 8, 1, 2, 5, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 12, 1, 1, 2, 8, 1, 1, 1, 5, 1, 1, 1, 1, 8, 1, 1, 1, 1, 9, 1, 1, 1, 8, 1, 1, 1, 13, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 12, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 7, 1, 1, 3, 5, 1, 1, 1, 16, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 2, 5, 1, 1, 1, 1, 2, 1, 12, 1, 1, 1, 1, 8, 1, 2, 5, 1, 1, 1, 1, 8, 1, 1, 1, 1, 57, 2, 1, 8, 1, 1, 1, 1, 5, 1, 1, 1, 8, 1, 1, 1, 1, 13, 1, 1, 1, 1, 1, 2, 5, 1, 1, 1, 6, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 13, 1, 1, 1, 8, 1, 1, 1, 17, 1, 1, 2, 8, 1, 2, 5, 1, 1, 1, 1, 8, 1, 1, 14, 1, 1, 2, 8, 1, 1, 1, 5, 1, 1, 1, 1, 8, 1, 1, 1, 1, 9, 1, 1, 1, 8, 1, 1, 1, 13, 1, 1, 1, 1, 12, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 7, 1, 1, 3, 5, 1, 1, 1, 16, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 2, 5, 1, 1, 1, 1, 2, 1, 12, 1, 1, 1, 1, 8, 1, 2, 5, 1, 1, 2, 8, 1, 60, 2, 1, 8, 1, 1, 1, 1, 5, 1, 1, 1, 8, 1, 1, 1, 1, 13, 1, 1, 1, 1, 1, 2, 5, 1, 1, 1, 6, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 13, 1, 1, 1, 8, 1, 1, 1, 17, 1, 1, 2, 8, 1, 2, 5, 1, 1, 1, 1, 8, 1, 1, 14, 1, 1, 2, 8, 1, 1, 1, 5, 1, 1, 1, 1, 8, 1, 1, 1, 1, 9, 1, 1, 1, 8, 1, 1, 1, 13, 1, 1, 1, 1, 12, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 7, 1, 1, 3, 5, 1, 1, 1, 16, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 2, 5, 1, 1, 1, 1, 2, 1, 12, 1, 1, 1, 1, 8, 1, 2, 5, 1, 1, 2, 8, 1, 60, 2, 1, 8, 1, 1, 1, 1, 5, 1, 1, 1, 8, 1, 1, 1, 1, 13, 1, 1, 1, 1, 1, 2, 5, 1, 1, 1, 6, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 13, 1, 1, 1, 8, 1, 1, 1, 17, 1, 1, 2, 8, 1, 2, 5, 1, 1, 1, 1, 8, 1, 1, 14, 1, 1, 2, 8, 1, 1, 1, 5, 1, 1, 1, 1, 8, 1, 1, 1, 1, 9, 1, 1, 1, 8, 1, 1, 1, 13, 1, 1, 1, 1, 12, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 7, 1, 1, 3, 5, 1, 1, 1, 16, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 2, 5, 1, 1, 1, 1, 2, 1, 12, 1, 1, 1, 1, 8, 1, 2, 5, 1, 1, 2, 8, 1, 60, 2, 1, 8, 1, 1, 1, 1, 5, 1, 1, 1, 8, 1, 1, 1, 1, 13, 1, 1, 1, 1, 1, 2, 5, 1, 1, 1, 6, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 13, 1, 1, 1, 8, 1, 1, 1, 17, 1, 1, 2, 8, 1, 2, 5, 1, 1, 1, 1, 8, 1, 1, 14, 1, 1, 2, 8, 1, 1, 1, 5, 1, 1, 1, 1, 8, 1, 1, 1, 1, 9, 1, 1, 1, 8, 1, 1, 1, 13, 1, 1, 1, 1, 12, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 7, 1, 1, 3, 5, 1, 1, 1, 16, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 2, 5, 1, 1, 1, 1, 2, 1, 12, 1, 1, 1, 1, 8, 1, 2, 5, 1, 1, 2, 8, 1, 60, 2, 1, 8, 1, 1, 1, 1, 5, 1, 1, 1, 8, 1, 1, 1, 1, 13, 1, 1, 1, 1, 1, 2, 5, 1, 1, 1, 6, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 12, 1, 1, 2, 1, 1, 1, 1, 4, 1, 1, 1, 1, 8, 1, 3, 4, 1, 1, 2, 8, 1, 2, 5, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 12, 1, 1, 1, 1, 8, 1, 1, 1, 5, 1, 1, 1, 3, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 8, 1, 1, 1, 5, 1, 1, 1, 1, 4, 1, 1, 1, 13, 1, 1, 1, 1, 12, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 7, 1, 1, 3, 5, 1, 1, 1, 16, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 12, 1, 1, 1, 1, 8, 1, 2, 5, 1, 1, 2, 8, 1, 60, 2, 1, 8, 1, 1, 1, 1, 5, 1, 1, 1, 8, 1, 1, 1, 1, 13, 1, 1, 1, 1, 1, 2, 5, 1, 1, 1, 6, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 12, 2, 1, 2, 1, 1, 1, 4, 1, 1, 1, 9, 1, 1, 1, 5, 1, 1, 2, 8, 1, 2, 5, 1, 2, 1, 2, 1, 1, 4, 1, 1, 1, 13, 1, 1, 1, 1, 8, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 8, 1, 1, 1, 5, 1, 1, 1, 1, 4, 1, 1, 1, 1, 12, 1, 1, 1, 1, 12, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 7, 1, 1, 3, 5, 1, 1, 1, 16, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 13, 1, 2, 8, 1, 2, 5, 1, 1, 2, 8, 1, 60, 2, 1, 8, 1, 1, 1, 1, 5, 1, 1, 1, 8, 1, 1, 1, 1, 13, 1, 1, 1, 1, 1, 2, 5, 1, 1, 1, 6, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 12, 2, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 9, 1, 1, 1, 1, 4, 1, 1, 2, 8, 1, 2, 5, 1, 1, 1, 1, 1, 1, 1, 1, 4, 2, 1, 1, 12, 2, 1, 1, 8, 1, 1, 1, 5, 2, 3, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 8, 1, 1, 1, 5, 1, 2, 1, 4, 2, 1, 1, 12, 1, 2, 1, 12, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 7, 1, 1, 3, 5, 1, 1, 1, 16, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 5, 2, 13, 2, 1, 1, 8, 1, 2, 5, 1, 1, 2, 8, 1, 60, 2, 1, 8, 1, 1, 1, 1, 5, 1, 1, 1, 8, 1, 1, 1, 1, 13, 1, 1, 1, 1, 1, 2, 5, 1, 1, 1, 6, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 12, 1, 1, 1, 1, 1, 1, 1, 1, 4, 2, 1, 1, 8, 1, 1, 1, 1, 4, 1, 1, 2, 8, 1, 2, 5, 1, 1, 2, 1, 1, 1, 1, 4, 1, 1, 1, 1, 12, 1, 1, 1, 1, 8, 1, 1, 1, 5, 1, 1, 1, 2, 1, 1, 1, 4, 2, 1, 2, 1, 1, 1, 5, 1, 1, 1, 8, 1, 1, 1, 5, 1, 1, 1, 1, 4, 1, 2, 1, 12, 1, 2, 1, 12, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 7, 1, 1, 3, 5, 1, 1, 1, 16, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 15, 1, 1, 1, 1, 8, 1, 2, 5, 1, 1, 2, 8, 1, 59, 1, 1, 1, 1, 8, 1, 1, 1, 1, 4, 1, 1, 1, 1, 8, 1, 1, 1, 1, 12, 1, 2, 1, 1, 2, 1, 4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 6, 1, 1, 1, 16, 1, 1, 1, 1, 16, 1, 1, 1, 1, 4, 1, 1, 10, 1, 1, 2, 8, 1, 1, 1, 1, 32, 1, 1, 1, 1, 8, 1, 1, 1, 1, 10, 1, 1, 4, 2, 1, 1, 9, 1, 1, 1, 4, 1, 1, 1, 1, 36, 2, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 4, 1, 2, 1, 16, 1, 1, 1, 1, 4, 1, 2, 1, 1, 1, 1, 1, 9, 1, 1, 1, 20, 1, 1, 1, 1, 8, 1, 2, 5, 1, 1, 1, 1, 8, 1, 1, 2, 56, 1, 1, 1, 1, 9, 1, 1, 1, 4, 2, 1, 1, 9, 1, 1, 1, 12, 2, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 5, 1, 1, 1, 1, 2, 5, 2, 1, 1, 16, 1, 1, 1, 1, 16, 1, 1, 1, 1, 4, 1, 1, 1, 9, 1, 1, 1, 1, 8, 1, 1, 1, 1, 32, 1, 1, 1, 1, 8, 1, 1, 1, 1, 9, 1, 1, 1, 4, 1, 1, 1, 1, 9, 1, 1, 1, 4, 1, 1, 1, 1, 37, 1, 1, 1, 4, 1, 1, 1, 1, 1, 2, 1, 4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 16, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 3, 8, 1, 1, 1, 1, 21, 1, 1, 1, 8, 1, 2, 5, 1, 1, 1, 9, 1, 1, 1, 1, 56, 3, 1, 9, 1, 1, 1, 4, 1, 1, 1, 1, 8, 1, 1, 1, 1, 13, 1, 1, 1, 1, 2, 1, 4, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 2, 4, 1, 1, 1, 1, 16, 1, 2, 1, 16, 1, 1, 1, 1, 4, 1, 1, 1, 1, 8, 1, 1, 1, 1, 8, 1, 1, 1, 1, 32, 1, 1, 2, 8, 1, 1, 1, 1, 8, 1, 1, 1, 1, 4, 1, 1, 1, 1, 9, 1, 1, 1, 4, 1, 1, 1, 1, 36, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 2, 1, 4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 2, 1, 4, 1, 1, 1, 1, 16, 1, 1, 1, 5, 1, 1, 1, 1, 1, 2, 1, 8, 1, 1, 1, 1, 20, 1, 1, 1, 1, 8, 1, 2, 5, 1, 1, 1, 1, 8, 1, 1, 1, 1, 56, 1, 1, 1, 10, 1, 1, 1, 4, 1, 1, 1, 1, 8, 1, 2, 1, 13, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 6, 1, 2, 1, 16, 1, 1, 1, 1, 16, 1, 1, 2, 4, 1, 1, 1, 9, 1, 1, 1, 1, 8, 1, 2, 1, 33, 1, 1, 1, 8, 1, 2, 1, 9, 2, 1, 5, 1, 1, 1, 9, 1, 1, 1, 4, 1, 1, 1, 1, 36, 2, 1, 1, 5, 1, 2, 1, 1, 6, 1, 1, 1, 1, 4, 2, 1, 1, 1, 1, 1, 5, 1, 1, 2, 16, 1, 1, 1, 5, 1, 2, 1, 2, 1, 1, 8, 1, 1, 22, 1, 1, 1, 1, 8, 1, 2, 5, 1, 2, 1, 8, 1, 1, 1, 1, 444, 1, 1, 1, 1, 8, 1, 2, 465, 1, 1, 1, 1, 8, 1, 2, 465, 1, 1, 1, 1, 8, 1, 2, 465, 1, 1, 1, 1, 8, 1, 2, 465, 1, 1, 1, 1, 8, 1, 2, 465, 1, 1, 1, 1, 8, 1, 2, 465, 1, 1, 1, 1, 8, 1, 2, 465, 1, 1, 1, 1, 8, 1, 2, 441, 1, 1, 1, 1, 20, 1, 1, 1, 1, 3, 1, 4, 1, 1, 1, 1, 440, 1, 1, 22, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 441, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 5, 1, 2, 1, 440, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 4, 2, 2, 440, 1, 1, 1, 1, 24, 2, 1, 1, 448, 1, 1, 1, 1, 24, 2, 1, 1, 448, 1, 1, 1, 1, 24, 2, 1, 1, 448, 1, 1, 1, 1, 24, 2, 1, 1, 5974, 1, 1, 1, 1, 1, 66, 1, 1, 1, 2, 1, 1, 25, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 364, 1, 1, 1, 1, 1, 66, 1, 1, 1, 2, 1, 1, 25, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 364, 1, 1, 1, 1, 1, 66, 1, 1, 1, 2, 1, 1, 25, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 364, 1, 1, 1, 1, 1, 66, 1, 1, 1, 2, 1, 1, 25, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 350, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 2, 1, 1, 1, 1, 3, 1, 1, 1, 1, 4, 1, 2, 1, 1, 1, 1, 1, 5, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 288, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 288, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 288, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 4, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 288, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 5, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 4, 1, 1, 2, 1, 1, 1, 1, 2, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 288, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 2, 1, 1, 288, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 2, 288, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 4, 1, 1, 2, 288, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 4, 1, 2, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1, 1, 4, 2, 1, 1, 8, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 2, 4, 1, 1, 1, 1, 288, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 2, 1, 1, 1, 1, 1, 4, 1, 2, 1, 4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 8, 1, 1, 3, 1, 1, 1, 4, 4, 8, 1, 1, 1, 1, 4, 2, 1, 1, 1, 1, 1, 1, 4, 1, 1, 4, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 4, 1, 1, 2, 1, 1, 2, 8, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 4, 2, 2, 4, 1, 1, 2, 1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 1, 1, 2, 288, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 1, 1, 2, 4, 1, 1, 2, 8, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 2, 8, 1, 1, 2, 4, 2, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 4, 1, 2, 1, 4, 1, 1, 2, 2, 1, 1, 4, 1, 1, 2, 4, 1, 1, 1, 1, 288, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 2, 1, 1, 1, 1, 1, 4, 2, 1, 1, 4, 2, 1, 1, 4, 1, 1, 2, 8, 1, 1, 3, 2, 1, 4, 3, 1, 8, 2, 1, 1, 4, 1, 2, 1, 1, 2, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 2, 2, 3, 1, 1, 1, 5, 1, 1, 1, 4, 1, 2, 1, 1, 2, 1, 4, 4, 4, 1, 1, 1, 1, 288, 2, 2, 1, 1, 1, 1, 473, 1, 3, 1, 1, 1, 472, 2, 2, 1, 1, 1, 1, 472, 1, 1, 1, 1, 1, 1, 1, 1, 31048, 
    };
    int x = 0, y = 0;
    for(int i = 0; i < sizeof(imageIndices) / sizeof(imageIndices[0]); ++i) {
        int index = imageIndices[i];
        int count = imageCounts[i];
        if(index >= 0) {
            const char* color = imageColors[index];
            Brain.Screen.setPenColor(color);
            for(int j = 0; j < count; ++j) {
                Brain.Screen.drawPixel(x++, y);
                if(x >= 480) { x = 0; y++; }
            }
        } else {
            x += count;
            while(x >= 480) { x -= 480; y++; }
        }
    }
}
#include "vex.h"

using namespace vex;

vex::controller Controller1;

vex::motor motor1 = vex::motor(vex::PORT19);
vex::inertial inertialSensor = vex::inertial(vex::PORT17);


double startxaxis = 0;
double startyaxis = 0;
double startzaxis = 0;
double startxrotate = 0;
double startyrotate = 0;
double startzrotate = 0;
int cordanategrid()
{
    vex::pot pot1(Brain.ThreeWirePort.A);
    vex::pot pot2(Brain.ThreeWirePort.B);

    int color1 = 0;
    int a;
    int b;
    int c;
    int d;
    int e;
    int f;
    int z;
    int g;
    int x;
    int y;
    int h;
    int i;
    int j;
    int dividetwo;
    int t;
    int border;
    int notdis;
    double angeddegree = 0.00;
    double olddiaplacement = 0.00;
    double diaplacement = 0.00;
    double oldxrotate = 0.00;
    double oldx = 0.00;
    double oldz = 0.00;
    double Xvalue = 0.0000;
    double Yvalue = 0.0000;
    double Zvalue = 0.0000;
    while (1 == 1)
    {

        motor1.spin(vex::directionType::fwd, (Controller1.Axis3.value() + Controller1.Axis2.value())/2, vex::velocityUnits::pct);
        motor2.spin(vex::directionType::fwd, -((Controller1.Axis3.value() - Controller1.Axis2.value()) / 2)*.3, vex::velocityUnits::pct);
        if (pot2.value(degrees) > 60)
        {
            motor1.spin(vex::directionType::fwd, (Controller1.Axis3.value() + Controller1.Axis2.value()) / 2 * 120 / 200, vex::velocityUnits::pct);
            motor2.spin(vex::directionType::fwd, -((Controller1.Axis3.value() - Controller1.Axis2.value()) / 2 * 120 / 200) * .3, vex::velocityUnits::pct);
        }
        if (pot2.value(degrees) > 160)
        {
            motor1.spin(vex::directionType::fwd, (Controller1.Axis3.value() + Controller1.Axis2.value()) / 2 * 10 / 200, vex::velocityUnits::pct);
            motor2.spin(vex::directionType::fwd, -((Controller1.Axis3.value() - Controller1.Axis2.value()) / 2 * 40 / 200) * .3, vex::velocityUnits::pct);
        }
        if (pot2.value(degrees) > 247)
        {
            motor1.spin(vex::directionType::fwd, (Controller1.Axis3.value() + Controller1.Axis2.value()) / 2 * 5 / 200, vex::velocityUnits::pct);
            motor2.spin(vex::directionType::fwd, -((Controller1.Axis3.value() - Controller1.Axis2.value()) / 2 * 20 / 200) * .3, vex::velocityUnits::pct);
        }
        if (Controller1.ButtonR1.pressing())
        {
            drawLogo();
            motor1.setVelocity(0, percent);
            motor2.setStopping(brake);
            motor2.setVelocity(0, percent);
            task::sleep(1000);
            inertialSensor.startCalibration();
            task::sleep(5000);
            motor2.setStopping(coast);
            motor1.setStopping(coast);
        }


        if (Controller1.ButtonR2.pressing())
        {
            motor2.setVelocity(100, vex::velocityUnits::pct);

            if (pot2.value(degrees) > 60)
            {
                motor2.setVelocity(100 / 2 * 120 / 200, vex::velocityUnits::pct);
            }
            if (pot2.value(degrees) > 120)
            { 
                motor2.setVelocity(100 * 10 / 200, vex::velocityUnits::pct);
            }
            if (pot2.value(degrees) > 247)
            { 
                motor2.setVelocity(100 * 10 / 200, vex::velocityUnits::pct);
            }
            motor2.spinTo(0,degrees);

            dividetwo = 1;
        }

        if (Controller1.ButtonL1.pressing())
        {
            Xvalue = 0;
            Zvalue = 0;
        }
        if (Controller1.ButtonL2.pressing())
        {
            motor1.setVelocity(100, vex::velocityUnits::pct);

            if (pot2.value(degrees) > 60)
            {
                motor1.setVelocity(100 / 2 * 120 / 200, vex::velocityUnits::pct);
            }
            if (pot2.value(degrees) > 120)
            { 
                motor1.setVelocity(100 * 10 / 200, vex::velocityUnits::pct);
            }
            if (pot2.value(degrees) > 247)
            { 
                motor1.setVelocity(100 * 10 / 200, vex::velocityUnits::pct);
            }
            motor1.spinFor(1, seconds);
                dividetwo = 1;
        }

        Brain.Screen.clearScreen();
        if (pot1.value(degrees) < 150)
            {
            Brain.Screen.setCursor(1, 2);

            
            Brain.Screen.print("Transmission Mode:");
            if (pot2.value(degrees) > 247)
            {
                Brain.Screen.print("Silent");
            }
            else if (pot2.value(degrees) > 160 and 247 > pot2.value(degrees))
            {
                Brain.Screen.print("Quiet");
            }
            else if (pot2.value(degrees) > 60 and 160>pot2.value(degrees))
            {
                Brain.Screen.print("120rpm");
            }
            else if (pot2.value(degrees) <= 60)
            {
                Brain.Screen.print("600rpm");
            }
            
            Brain.Screen.setCursor(+3, 2);
            Brain.Screen.print("Angle:");

            Brain.Screen.print(inertialSensor.heading(degrees));
            }
        a = b = c = d = z = 0;
        Brain.Screen.setPenWidth(1);
        border = 0;

        if (Controller1.ButtonLeft.pressing())
            border= 1;

        Brain.Screen.setPenColor(color::white);
        if (Zvalue < -140 and border == 0)
            Zvalue = -140;
        if (Zvalue > -4 and border == 0)
            Zvalue = -4;
        if (Xvalue > 140 and border == 0)
            Xvalue = 140;
        if (Xvalue < 4 and border == 0)
            Xvalue = 4;


        if (Zvalue < -144 or Zvalue > 0 or Xvalue > 144 or Xvalue < 0)
            Brain.Screen.setPenColor(color::red);

        // Draw 2 White Lines
        for (int k = 1; k <= 6; k++)
            z = 204;
        a = 18;
        b = z + a;
        c = g - z - z / 36;
        e = a + x;
        g = b + y;

        x = 10;
        y = 5;
        Brain.Screen.drawLine(g, 18+5, 18+18+10, 18+5);

        {
            Brain.Screen.drawLine(e + a, g, a + e, c);
            Brain.Screen.drawLine(a + e, g, e + b + z / 36, g);
        }
        Brain.Screen.setPenColor(color::blue);
        Brain.Screen.setPenWidth(3);




        Brain.Screen.drawCircle(e + a + 5, c + z / 36+5, 3);
        Brain.Screen.drawCircle(e + a + z - 5, c + z / 36 + 5, 3);


        Brain.Screen.drawCircle(e + a + 34*2, c + z / 36 + 17*2, 3);
        Brain.Screen.drawCircle(e + a + 34 * 2+17+12, c + z / 36 + 17 * 2+5, 3);
        Brain.Screen.drawCircle(e + a + 34 * 2+17+12, c + z / 36 + 12 * 2+5-1, 3);

        Brain.Screen.drawCircle(e + a + 17*2, c + z + z / 36 - 1-17*2, 3);
        Brain.Screen.drawCircle(e + a + 17 * 4, c + z + z / 36 - 1 - 17 * 2, 3);
        Brain.Screen.drawCircle(e + a + 17 * 10, c + z + z / 36 - 1 - 17 * 2-17*4, 3);
        Brain.Screen.drawCircle(e + a + 17, c + z + z / 36 - 1 - 17 * 6, 3);

        Brain.Screen.setPenColor(color::red);
        Brain.Screen.drawCircle(e + a + z - 5, c + z + z / 36 - 6, 3);
        Brain.Screen.drawCircle(e + a + 34 * 4, c + z / 36 + 17 * 2, 3);
        Brain.Screen.drawCircle(e + a + 17 * 10+17, c + z + z / 36 - 1 - 17 * 2 - 17 * 4, 3);
        Brain.Screen.drawCircle(e + a + 17 * 2, c + z + z / 36 - 1 - 17 * 6, 3);
        Brain.Screen.drawCircle(e + a + 34 * 2 + 17 + 12+10, c + z / 36 + 17 * 2 + 5, 3);
        Brain.Screen.drawCircle(e + a + 34 * 2 + 17 + 12+10, c + z / 36 + 12 * 2 -1 + 5, 3);

        Brain.Screen.drawCircle(e + a + 5, c + z + z / 36 -6, 3);
        Brain.Screen.drawCircle(e + a + 17 * 8, c + z + z / 36 - 1 - 17 * 2, 3);
        Brain.Screen.drawCircle(e + a + 17 * 10, c + z + z / 36 - 1 - 17 * 2, 3);

        Brain.Screen.setPenColor("#e8fb02");
        Brain.Screen.setPenWidth(5);

        Brain.Screen.drawLine(e + a + 34 * 3, c + z / 36 + 17 * 4, e + a + 34 * 4, c + z / 36 + 17 * 6);
        Brain.Screen.drawLine(e + a + 34 * 3, c + z / 36 + 17 * 8, e + a + 34 * 4, c + z / 36 + 17 * 6);
        Brain.Screen.drawLine(e + a + 34 * 3, c + z / 36 + 17 * 8, e + a + 34 * 2, c + z / 36 + 17 * 6);
        Brain.Screen.drawLine(e + a + 34 * 3, c + z / 36 + 17 * 4, e + a + 34 * 2, c + z / 36 + 17 * 6);

        Brain.Screen.drawCircle(e + a + 34 * 2, c + z / 36 + 17 * 4, 3);
        Brain.Screen.drawCircle(e + a + 34 * 2, c + z / 36 + 17 * 8, 3);
        Brain.Screen.drawCircle(e + a + 34 * 4, c + z / 36 + 17 * 4, 3);
        Brain.Screen.drawCircle(e + a + 34 * 4, c + z / 36 + 17 * 8, 3);
        Brain.Screen.drawCircle(e + a + 34 * 3, c + z / 36 + 17 * 10, 3);

        Brain.Screen.setPenColor(color::white);
        Brain.Screen.setPenWidth(1);

        a = 18;
        b = z + 4 + a + y;
        c = z - 4 + a + y;
        d = z / 12;

        {
            Brain.Screen.drawLine(e + a + 1 * d, b, e + a + 1 * d, c);
            Brain.Screen.drawLine(e + a + 2 * d, b, e + a + 2 * d, c);
            Brain.Screen.drawLine(e + a + 3 * d, b, e + a + 3 * d, c);
            Brain.Screen.drawLine(e + a + 4 * d, b, e + a + 4 * d, c);
            Brain.Screen.drawLine(e + a + 5 * d, b, e + a + 5 * d, c);
            Brain.Screen.drawLine(e + a + 6 * d, b, e + a + 6 * d, c);
            Brain.Screen.drawLine(e + a + 7 * d, b, e + a + 7 * d, c);
            Brain.Screen.drawLine(e + a + 8 * d, b, e + a + 8 * d, c);
            Brain.Screen.drawLine(e + a + 9 * d, b, e + a + 9 * d, c);
            Brain.Screen.drawLine(e + a + 10 * d, b, e + a + 10 * d, c);
            Brain.Screen.drawLine(e + a + 11 * d, b, e + a + 11 * d, c);
            Brain.Screen.drawLine(e + a + 12 * d, b, e + a + 12 * d, c);
        }
        t = .01;
        a = 18 + y;
        b = a - y + 4;
        c = a - y - 4;
        d = z / 12;
        {
            Brain.Screen.drawLine(e + c, z + a - (d * 1), e + b, z + a - (d * 1));
            Brain.Screen.drawLine(e + c, z + a - (d * 2), e + b, z + a - (d * 2));
            Brain.Screen.drawLine(e + c, z + a - (d * 3), e + b, z + a - (d * 3));
            Brain.Screen.drawLine(e + c, z + a - (d * 4), e + b, z + a - (d * 4));
            Brain.Screen.drawLine(e + c, z + a - (d * 5), e + b, z + a - (d * 5));
            Brain.Screen.drawLine(e + c, z + a - (d * 6), e + b, z + a - (d * 6));
            Brain.Screen.drawLine(e + c, z + a - (d * 7), e + b, z + a - (d * 7));
            Brain.Screen.drawLine(e + c, z + a - (d * 8), e + b, z + a - (d * 8));
            Brain.Screen.drawLine(e + c, z + a - (d * 9), e + b, z + a - (d * 9));
            Brain.Screen.drawLine(e + c, z + a - (d * 10), e + b, z + a - (d * 10));
            Brain.Screen.drawLine(e + c, z + a - (d * 11), e + b, z + a - (d * 11));
            Brain.Screen.drawLine(e + c, z + a - (d * 12), e + b, z + a - (d * 12));
        }
        

        Brain.Screen.setPenColor("#505050");

        a = 18 + y;
        b = a - y + 4;
        c = a - y + z;
        d = z / 12;
        {
            Brain.Screen.drawLine(e + c, z + a - (d * 1), e + b, z + a - (d * 1));
            Brain.Screen.drawLine(e + c, z + a - (d * 2), e + b, z + a - (d * 2));
            Brain.Screen.drawLine(e + c, z + a - (d * 3), e + b, z + a - (d * 3));
            Brain.Screen.drawLine(e + c, z + a - (d * 4), e + b, z + a - (d * 4));
            Brain.Screen.drawLine(e + c, z + a - (d * 5), e + b, z + a - (d * 5));
            Brain.Screen.drawLine(e + c, z + a - (d * 6), e + b, z + a - (d * 6));
            Brain.Screen.drawLine(e + c, z + a - (d * 7), e + b, z + a - (d * 7));
            Brain.Screen.drawLine(e + c, z + a - (d * 8), e + b, z + a - (d * 8));
            Brain.Screen.drawLine(e + c, z + a - (d * 9), e + b, z + a - (d * 9));
            Brain.Screen.drawLine(e + c, z + a - (d * 10), e + b, z + a - (d * 10));
            Brain.Screen.drawLine(e + c, z + a - (d * 11), e + b, z + a - (d * 11));
            Brain.Screen.drawLine(e + c, z + a - (d * 12), e + b, z + a - (d * 12));
        }
        a = 18;
        b = z - z + a + y;
        c = z - 4 + a + y;
        d = z / 12;
        {
            Brain.Screen.drawLine(e + a + 1 * d, b, e + a + 1 * d, c);
            Brain.Screen.drawLine(e + a + 2 * d, b, e + a + 2 * d, c);
            Brain.Screen.drawLine(e + a + 3 * d, b, e + a + 3 * d, c);
            Brain.Screen.drawLine(e + a + 4 * d, b, e + a + 4 * d, c);
            Brain.Screen.drawLine(e + a + 5 * d, b, e + a + 5 * d, c);
            Brain.Screen.drawLine(e + a + 6 * d, b, e + a + 6 * d, c);
            Brain.Screen.drawLine(e + a + 7 * d, b, e + a + 7 * d, c);
            Brain.Screen.drawLine(e + a + 8 * d, b, e + a + 8 * d, c);
            Brain.Screen.drawLine(e + a + 9 * d, b, e + a + 9 * d, c);
            Brain.Screen.drawLine(e + a + 10 * d, b, e + a + 10 * d, c);
            Brain.Screen.drawLine(e + a + 11 * d, b, e + a + 11 * d, c);
            Brain.Screen.drawLine(e + a + 12 * d, b, e + a + 12 * d, c);
        }
        a = 18 + y;
        b = a - y + 4;
        c = a - y - 4;
        d = z / 12;

        Brain.Screen.setPenColor(color::white);

        a = 18;
        b = z + a;
        c = g - z - z / 36;
        e = a + x;
        g = b + y;

        diaplacement = motor1.position(degrees) * 8.63937979737 / 360 * 3;


            
        
        
        
        if (pot2.value(degrees) > 160)
        {

            diaplacement = motor1.position(degrees) * 8.63937979737 / 360 * 40 * 3 / 2;
            dividetwo = 0;
        }
        if ((dividetwo = 1) and pot2.value(degrees) > 247)
        {
            diaplacement = motor1.position(degrees) * 8.63937979737 / 360 * 40*3/2;
            dividetwo = 0;
        }
        if ((dividetwo = 0) and pot2.value(degrees) > 247)
        {
            diaplacement = motor1.position(degrees) * 8.63937979737 / 360 * 40 * 3;
        }
        angeddegree = inertialSensor.heading(degrees);
        notdis = 0;
        if ((angeddegree > 90));
            angeddegree = angeddegree - 90;
            notdis = notdis + 1;

        if ((angeddegree > 90));
            angeddegree = angeddegree - 90;
            notdis = notdis + 1;
        if ((angeddegree > 90));
            angeddegree = angeddegree - 90;
            notdis = notdis + 1;




        Xvalue = Xvalue + (diaplacement * sin(angeddegree * M_PI / 180));
        Zvalue = Zvalue + (diaplacement * cos(angeddegree * M_PI / 180));
        if (pot1.value(degrees) < 150)
        {

            Brain.Screen.setCursor(+2, 2);
            Brain.Screen.print("Speed: ");
            Brain.Screen.print(diaplacement * 1000/50/10);

        }

        motor1.resetPosition();
        diaplacement = motor1.position(degrees)* 8.63937979737 / 360*3;

        if (notdis > 4);
            notdis = notdis - 4;

        if (notdis = 1);
            Xvalue = Xvalue * -1;

        if (notdis = 2);
            Xvalue = Xvalue * -1;
            Zvalue = Zvalue * -1;
            
        if (notdis = 3);
            Zvalue = Zvalue * -1;



        Brain.Screen.setPenColor(color::white);
        Brain.Screen.setPenWidth(5);

        Brain.Screen.drawCircle((-Zvalue * z / 144) + e + a, -(Xvalue * z / 144) + (g - z) + z, 2);
        Brain.Screen.setPenWidth(1);

        a = 18 + y;
        b = a - y + 4;
        c = a - y - 4;
        d = z / 12;

        Brain.Screen.drawCircle(e + a - y + 1, z + a - 1, 1, white);
        f = 40;
        i = 20;

        Brain.Screen.drawLine(e + z + a - y + z / 12 + f, z + a, e + z + a - y + z / 12 + f, a - z / 36);
        Brain.Screen.drawCircle(e + z + a - y + z / 12 + f, -(Yvalue * 39.3701 * z / 144) + (g - z) + z, 2, 0);

        h = 10;
        f = f + f + h + i;
        Brain.Screen.setPenColor(color::red);

        Brain.Screen.drawLine(e + z + a - y + z / 12 + f, z + a, e + z + a - y + z / 12 + f, a - z / 36);
        f = ((f - h - i) / 2) * 3 + i;
        Brain.Screen.setPenColor(color::yellow);

        Brain.Screen.drawLine(e + z + a - y + z / 12 + f, z + a, e + z + a - y + z / 12 + f, a - z / 36);
        f = (f - i) / 3 * 4 - h + i;
        Brain.Screen.setPenColor(color::blue);

        Brain.Screen.drawLine(e + z + a - y + z / 12 + f, z + a, e + z + a - y + z / 12 + f, a - z / 36);
        Brain.Screen.setPenColor(color::white);

        f = (f - i + h) / 4;

        a = 18;
        b = 8;
        c = 4;
        d = z / 12;
        {
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 1), e + z + a + z / 12 + f - c, z + a + y - (d * 1));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 2), e + z + a + z / 12 + f - c, z + a + y - (d * 2));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 3), e + z + a + z / 12 + f - c, z + a + y - (d * 3));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 4), e + z + a + z / 12 + f - c, z + a + y - (d * 4));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 5), e + z + a + z / 12 + f - c, z + a + y - (d * 5));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 6), e + z + a + z / 12 + f - c, z + a + y - (d * 6));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 7), e + z + a + z / 12 + f - c, z + a + y - (d * 7));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 8), e + z + a + z / 12 + f - c, z + a + y - (d * 8));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 9), e + z + a + z / 12 + f - c, z + a + y - (d * 9));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 10), e + z + a + z / 12 + f - c, z + a + y - (d * 10));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 11), e + z + a + z / 12 + f - c, z + a + y - (d * 11));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 12), e + z + a + z / 12 + f - c, z + a + y - (d * 12));
        }
        Brain.Screen.drawLine(e + z + a + z / 12 + f + b, z + a + y - (d * 0), e + z + a + z / 12 + f - b, z + a + y - (d * 0));

        f = f + f + h + i;

        j = 3;

        a = 18;
        b = 8;
        c = 4;
        d = z / 12;
        Brain.Screen.setPenColor(color::red);

        {
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 1), e + z + a + z / 12 + f - c, z + a + y - (d * 1));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 2), e + z + a + z / 12 + f - c, z + a + y - (d * 2));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c + j, z + a + y - (d * 3), e + z + a + z / 12 + f - c - j, z + a + y - (d * 3));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 4), e + z + a + z / 12 + f - c, z + a + y - (d * 4));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 5), e + z + a + z / 12 + f - c, z + a + y - (d * 5));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c + j, z + a + y - (d * 6), e + z + a + z / 12 + f - c - j, z + a + y - (d * 6));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 7), e + z + a + z / 12 + f - c, z + a + y - (d * 7));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 8), e + z + a + z / 12 + f - c, z + a + y - (d * 8));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c + j, z + a + y - (d * 9), e + z + a + z / 12 + f - c - j, z + a + y - (d * 9));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 10), e + z + a + z / 12 + f - c, z + a + y - (d * 10));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 11), e + z + a + z / 12 + f - c, z + a + y - (d * 11));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c + j, z + a + y - (d * 12), e + z + a + z / 12 + f - c - j, z + a + y - (d * 12));
        }
        Brain.Screen.drawLine(e + z + a + z / 12 + f + b, z + a + y - (d * 0), e + z + a + z / 12 + f - b, z + a + y - (d * 0));
        Brain.Screen.setPenColor(color::white);
        Brain.Screen.drawCircle(e + z + a - y + z / 12 + f + 5, ((inertialSensor.heading(degrees)) * 204 / 360) * -1 + a + y + z, 2, 0);

        f = ((f - h - i) / 2) * 3 + i;

        a = 18;
        b = 8;
        c = 4;
        d = z / 12;
        Brain.Screen.setPenColor(color::yellow);

        {
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 1), e + z + a + z / 12 + f - c, z + a + y - (d * 1));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 2), e + z + a + z / 12 + f - c, z + a + y - (d * 2));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c + j, z + a + y - (d * 3), e + z + a + z / 12 + f - c - j, z + a + y - (d * 3));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 4), e + z + a + z / 12 + f - c, z + a + y - (d * 4));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 5), e + z + a + z / 12 + f - c, z + a + y - (d * 5));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c + j, z + a + y - (d * 6), e + z + a + z / 12 + f - c - j, z + a + y - (d * 6));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 7), e + z + a + z / 12 + f - c, z + a + y - (d * 7));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 8), e + z + a + z / 12 + f - c, z + a + y - (d * 8));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c + j, z + a + y - (d * 9), e + z + a + z / 12 + f - c - j, z + a + y - (d * 9));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 10), e + z + a + z / 12 + f - c, z + a + y - (d * 10));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 11), e + z + a + z / 12 + f - c, z + a + y - (d * 11));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c + j, z + a + y - (d * 12), e + z + a + z / 12 + f - c - j, z + a + y - (d * 12));
        }
        Brain.Screen.drawLine(e + z + a + z / 12 + f + b, z + a + y - (d * 0), e + z + a + z / 12 + f - b, z + a + y - (d * 0));
        Brain.Screen.setPenColor(color::white);
        if (inertialSensor.pitch(degrees) < 0)
            Brain.Screen.drawCircle(e + z + a - y + z / 12 + f + 5, ((-(inertialSensor.pitch(degrees))) * 204 / 360) + a + y, 2, 0);
        else
            (Brain.Screen.drawCircle(e + z + a - y + z / 12 + f + 5, ((inertialSensor.pitch(degrees)) * 204 / 360) * -1 + a + y + z, 2, 0));

        f = (f - i) / 3 * 4 - h + i;

        a = 18;
        b = 8;
        c = 4;
        d = z / 12;
        Brain.Screen.setPenColor(color::blue);

        {
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 1), e + z + a + z / 12 + f - c, z + a + y - (d * 1));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 2), e + z + a + z / 12 + f - c, z + a + y - (d * 2));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c + j, z + a + y - (d * 3), e + z + a + z / 12 + f - c - j, z + a + y - (d * 3));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 4), e + z + a + z / 12 + f - c, z + a + y - (d * 4));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 5), e + z + a + z / 12 + f - c, z + a + y - (d * 5));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c + j, z + a + y - (d * 6), e + z + a + z / 12 + f - c - j, z + a + y - (d * 6));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 7), e + z + a + z / 12 + f - c, z + a + y - (d * 7));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 8), e + z + a + z / 12 + f - c, z + a + y - (d * 8));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c + j, z + a + y - (d * 9), e + z + a + z / 12 + f - c - j, z + a + y - (d * 9));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 10), e + z + a + z / 12 + f - c, z + a + y - (d * 10));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c, z + a + y - (d * 11), e + z + a + z / 12 + f - c, z + a + y - (d * 11));
            Brain.Screen.drawLine(e + z + a + z / 12 + f + c + j, z + a + y - (d * 12), e + z + a + z / 12 + f - c - j, z + a + y - (d * 12));
        }
        Brain.Screen.drawLine(e + z + a + z / 12 + f + b, z + a + y - (d * 0), e + z + a + z / 12 + f - b, z + a + y - (d * 0));
        Brain.Screen.setPenColor(color::white);
        if (inertialSensor.roll(degrees) < 0)
            Brain.Screen.drawCircle(e + z + a - y + z / 12 + f + 5, ((-(inertialSensor.roll(degrees))) * 204 / 360) + a + y, 2, 0);
        else
            (Brain.Screen.drawCircle(e + z + a - y + z / 12 + f + 5, ((inertialSensor.roll(degrees)) * 204 / 360) * -1 + a + y + z, 2, 0));
        vex::inertial inertialSensor = vex::inertial(vex::PORT1);

        task::sleep(50);
    }

    (e + z + a + z / 12 + f + b, z + a + y - (d * 0), e + z + a + z / 12 + f - b, z + a + y - (d * 0));

}

int main()
{
    vex::pot pot1(Brain.ThreeWirePort.A);
    vex::pot pot2(Brain.ThreeWirePort.B);
    drawLogo();
    motor2.resetPosition();
    inertialSensor.startCalibration();
    task::sleep(5000);
    startxrotate = inertialSensor.heading(degrees);
    startyrotate = inertialSensor.pitch(degrees);
    startzrotate = inertialSensor.roll(degrees);

    vex::task rainbow(cordanategrid);
}

